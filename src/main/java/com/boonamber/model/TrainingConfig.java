/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boonamber.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.boonamber.JSON;

/**
 * TrainingConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TrainingConfig {
  public static final String SERIALIZED_NAME_HISTORY_WINDOW = "historyWindow";
  @SerializedName(SERIALIZED_NAME_HISTORY_WINDOW)
  private Integer historyWindow;

  public static final String SERIALIZED_NAME_BUFFERING_SAMPLES = "bufferingSamples";
  @SerializedName(SERIALIZED_NAME_BUFFERING_SAMPLES)
  private Integer bufferingSamples;

  public static final String SERIALIZED_NAME_LEARNING_MAX_SAMPLES = "learningMaxSamples";
  @SerializedName(SERIALIZED_NAME_LEARNING_MAX_SAMPLES)
  private Integer learningMaxSamples;

  public static final String SERIALIZED_NAME_LEARNING_MAX_CLUSTERS = "learningMaxClusters";
  @SerializedName(SERIALIZED_NAME_LEARNING_MAX_CLUSTERS)
  private Integer learningMaxClusters;

  public static final String SERIALIZED_NAME_LEARNING_RATE_NUMERATOR = "learningRateNumerator";
  @SerializedName(SERIALIZED_NAME_LEARNING_RATE_NUMERATOR)
  private Integer learningRateNumerator;

  public static final String SERIALIZED_NAME_LEARNING_RATE_DENOMINATOR = "learningRateDenominator";
  @SerializedName(SERIALIZED_NAME_LEARNING_RATE_DENOMINATOR)
  private Integer learningRateDenominator;

  public TrainingConfig() {
  }

  public TrainingConfig historyWindow(Integer historyWindow) {
    
    this.historyWindow = historyWindow;
    return this;
  }

   /**
   * Number of past inferences to take into account when computing &#x60;warningLevel&#x60; at a given moment.
   * @return historyWindow
  **/
  @javax.annotation.Nullable

  public Integer getHistoryWindow() {
    return historyWindow;
  }


  public void setHistoryWindow(Integer historyWindow) {
    this.historyWindow = historyWindow;
  }


  public TrainingConfig bufferingSamples(Integer bufferingSamples) {
    
    this.bufferingSamples = bufferingSamples;
    return this;
  }

   /**
   * Number of data vectors to collect during &#x60;Buffering&#x60;. These samples are used as data for &#x60;Autotuning&#x60;.
   * @return bufferingSamples
  **/
  @javax.annotation.Nullable

  public Integer getBufferingSamples() {
    return bufferingSamples;
  }


  public void setBufferingSamples(Integer bufferingSamples) {
    this.bufferingSamples = bufferingSamples;
  }


  public TrainingConfig learningMaxSamples(Integer learningMaxSamples) {
    
    this.learningMaxSamples = learningMaxSamples;
    return this;
  }

   /**
   * Maximum number of vectors to process during &#x60;Learning&#x60; before transitioning to &#x60;Monitoring&#x60;.
   * @return learningMaxSamples
  **/
  @javax.annotation.Nullable

  public Integer getLearningMaxSamples() {
    return learningMaxSamples;
  }


  public void setLearningMaxSamples(Integer learningMaxSamples) {
    this.learningMaxSamples = learningMaxSamples;
  }


  public TrainingConfig learningMaxClusters(Integer learningMaxClusters) {
    
    this.learningMaxClusters = learningMaxClusters;
    return this;
  }

   /**
   * Maximum number of clusters before model transitions from &#x60;Learning&#x60; to &#x60;Monitoring&#x60;.
   * @return learningMaxClusters
  **/
  @javax.annotation.Nullable

  public Integer getLearningMaxClusters() {
    return learningMaxClusters;
  }


  public void setLearningMaxClusters(Integer learningMaxClusters) {
    this.learningMaxClusters = learningMaxClusters;
  }


  public TrainingConfig learningRateNumerator(Integer learningRateNumerator) {
    
    this.learningRateNumerator = learningRateNumerator;
    return this;
  }

   /**
   * Switch to &#x60;Monitoring&#x60; if there were fewer than &#x60;learningRateNumerator&#x60; new clusters in the last &#x60;learningRateDenominator&#x60; inferences.
   * @return learningRateNumerator
  **/
  @javax.annotation.Nullable

  public Integer getLearningRateNumerator() {
    return learningRateNumerator;
  }


  public void setLearningRateNumerator(Integer learningRateNumerator) {
    this.learningRateNumerator = learningRateNumerator;
  }


  public TrainingConfig learningRateDenominator(Integer learningRateDenominator) {
    
    this.learningRateDenominator = learningRateDenominator;
    return this;
  }

   /**
   * See &#x60;learningRateNumerator&#x60;.
   * @return learningRateDenominator
  **/
  @javax.annotation.Nullable

  public Integer getLearningRateDenominator() {
    return learningRateDenominator;
  }


  public void setLearningRateDenominator(Integer learningRateDenominator) {
    this.learningRateDenominator = learningRateDenominator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainingConfig trainingConfig = (TrainingConfig) o;
    return Objects.equals(this.historyWindow, trainingConfig.historyWindow) &&
        Objects.equals(this.bufferingSamples, trainingConfig.bufferingSamples) &&
        Objects.equals(this.learningMaxSamples, trainingConfig.learningMaxSamples) &&
        Objects.equals(this.learningMaxClusters, trainingConfig.learningMaxClusters) &&
        Objects.equals(this.learningRateNumerator, trainingConfig.learningRateNumerator) &&
        Objects.equals(this.learningRateDenominator, trainingConfig.learningRateDenominator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(historyWindow, bufferingSamples, learningMaxSamples, learningMaxClusters, learningRateNumerator, learningRateDenominator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainingConfig {\n");
    sb.append("    historyWindow: ").append(toIndentedString(historyWindow)).append("\n");
    sb.append("    bufferingSamples: ").append(toIndentedString(bufferingSamples)).append("\n");
    sb.append("    learningMaxSamples: ").append(toIndentedString(learningMaxSamples)).append("\n");
    sb.append("    learningMaxClusters: ").append(toIndentedString(learningMaxClusters)).append("\n");
    sb.append("    learningRateNumerator: ").append(toIndentedString(learningRateNumerator)).append("\n");
    sb.append("    learningRateDenominator: ").append(toIndentedString(learningRateDenominator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("historyWindow");
    openapiFields.add("bufferingSamples");
    openapiFields.add("learningMaxSamples");
    openapiFields.add("learningMaxClusters");
    openapiFields.add("learningRateNumerator");
    openapiFields.add("learningRateDenominator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrainingConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrainingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainingConfig is not found in the empty JSON string", TrainingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrainingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainingConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainingConfig>() {
           @Override
           public void write(JsonWriter out, TrainingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainingConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrainingConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrainingConfig
  * @throws IOException if the JSON string is invalid with respect to TrainingConfig
  */
  public static TrainingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainingConfig.class);
  }

 /**
  * Convert an instance of TrainingConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

