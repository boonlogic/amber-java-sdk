/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boonamber.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.boonamber.JSON;

/**
 * MNCP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MNCP {
  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private BigDecimal versionNumber;

  public static final String SERIALIZED_NAME_NUM_OF_FEATURES = "numOfFeatures";
  @SerializedName(SERIALIZED_NAME_NUM_OF_FEATURES)
  private BigDecimal numOfFeatures;

  public static final String SERIALIZED_NAME_M_NUMERIC_FORMAT = "m_NumericFormat";
  @SerializedName(SERIALIZED_NAME_M_NUMERIC_FORMAT)
  private BigDecimal mNumericFormat;

  public static final String SERIALIZED_NAME_M_PERCENT_VARIATION = "m_PercentVariation";
  @SerializedName(SERIALIZED_NAME_M_PERCENT_VARIATION)
  private Float mPercentVariation;

  public static final String SERIALIZED_NAME_M_ACCURACY = "m_Accuracy";
  @SerializedName(SERIALIZED_NAME_M_ACCURACY)
  private Float mAccuracy;

  public static final String SERIALIZED_NAME_M_STREAMING_WINDOW_SIZE = "m_StreamingWindowSize";
  @SerializedName(SERIALIZED_NAME_M_STREAMING_WINDOW_SIZE)
  private BigDecimal mStreamingWindowSize;

  public MNCP() {
  }

  public MNCP versionNumber(BigDecimal versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(BigDecimal versionNumber) {
    this.versionNumber = versionNumber;
  }


  public MNCP numOfFeatures(BigDecimal numOfFeatures) {
    
    this.numOfFeatures = numOfFeatures;
    return this;
  }

   /**
   * Get numOfFeatures
   * @return numOfFeatures
  **/
  @javax.annotation.Nullable

  public BigDecimal getNumOfFeatures() {
    return numOfFeatures;
  }


  public void setNumOfFeatures(BigDecimal numOfFeatures) {
    this.numOfFeatures = numOfFeatures;
  }


  public MNCP mNumericFormat(BigDecimal mNumericFormat) {
    
    this.mNumericFormat = mNumericFormat;
    return this;
  }

   /**
   * Get mNumericFormat
   * @return mNumericFormat
  **/
  @javax.annotation.Nullable

  public BigDecimal getmNumericFormat() {
    return mNumericFormat;
  }


  public void setmNumericFormat(BigDecimal mNumericFormat) {
    this.mNumericFormat = mNumericFormat;
  }


  public MNCP mPercentVariation(Float mPercentVariation) {
    
    this.mPercentVariation = mPercentVariation;
    return this;
  }

   /**
   * Get mPercentVariation
   * @return mPercentVariation
  **/
  @javax.annotation.Nullable

  public Float getmPercentVariation() {
    return mPercentVariation;
  }


  public void setmPercentVariation(Float mPercentVariation) {
    this.mPercentVariation = mPercentVariation;
  }


  public MNCP mAccuracy(Float mAccuracy) {
    
    this.mAccuracy = mAccuracy;
    return this;
  }

   /**
   * Get mAccuracy
   * @return mAccuracy
  **/
  @javax.annotation.Nullable

  public Float getmAccuracy() {
    return mAccuracy;
  }


  public void setmAccuracy(Float mAccuracy) {
    this.mAccuracy = mAccuracy;
  }


  public MNCP mStreamingWindowSize(BigDecimal mStreamingWindowSize) {
    
    this.mStreamingWindowSize = mStreamingWindowSize;
    return this;
  }

   /**
   * Get mStreamingWindowSize
   * @return mStreamingWindowSize
  **/
  @javax.annotation.Nullable

  public BigDecimal getmStreamingWindowSize() {
    return mStreamingWindowSize;
  }


  public void setmStreamingWindowSize(BigDecimal mStreamingWindowSize) {
    this.mStreamingWindowSize = mStreamingWindowSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MNCP mNCP = (MNCP) o;
    return Objects.equals(this.versionNumber, mNCP.versionNumber) &&
        Objects.equals(this.numOfFeatures, mNCP.numOfFeatures) &&
        Objects.equals(this.mNumericFormat, mNCP.mNumericFormat) &&
        Objects.equals(this.mPercentVariation, mNCP.mPercentVariation) &&
        Objects.equals(this.mAccuracy, mNCP.mAccuracy) &&
        Objects.equals(this.mStreamingWindowSize, mNCP.mStreamingWindowSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionNumber, numOfFeatures, mNumericFormat, mPercentVariation, mAccuracy, mStreamingWindowSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MNCP {\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    numOfFeatures: ").append(toIndentedString(numOfFeatures)).append("\n");
    sb.append("    mNumericFormat: ").append(toIndentedString(mNumericFormat)).append("\n");
    sb.append("    mPercentVariation: ").append(toIndentedString(mPercentVariation)).append("\n");
    sb.append("    mAccuracy: ").append(toIndentedString(mAccuracy)).append("\n");
    sb.append("    mStreamingWindowSize: ").append(toIndentedString(mStreamingWindowSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("versionNumber");
    openapiFields.add("numOfFeatures");
    openapiFields.add("m_NumericFormat");
    openapiFields.add("m_PercentVariation");
    openapiFields.add("m_Accuracy");
    openapiFields.add("m_StreamingWindowSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MNCP
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MNCP.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MNCP is not found in the empty JSON string", MNCP.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MNCP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MNCP` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MNCP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MNCP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MNCP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MNCP.class));

       return (TypeAdapter<T>) new TypeAdapter<MNCP>() {
           @Override
           public void write(JsonWriter out, MNCP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MNCP read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MNCP given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MNCP
  * @throws IOException if the JSON string is invalid with respect to MNCP
  */
  public static MNCP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MNCP.class);
  }

 /**
  * Convert an instance of MNCP to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

