/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boonamber.models;

import java.util.Objects;
import java.util.Arrays;
import com.boonamber.models.MNanoBackend;
import com.boonamber.models.MNanoConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.boonamber.JSON;

/**
 * MNano
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MNano {
  public static final String SERIALIZED_NAME_M_NANO_CONFIG = "m_NanoConfig";
  @SerializedName(SERIALIZED_NAME_M_NANO_CONFIG)
  private MNanoConfig mNanoConfig;

  public static final String SERIALIZED_NAME_MAGIC_NUMBER = "magicNumber";
  @SerializedName(SERIALIZED_NAME_MAGIC_NUMBER)
  private BigDecimal magicNumber;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private BigDecimal versionNumber;

  public static final String SERIALIZED_NAME_BACKEND_VERSION = "BackendVersion";
  @SerializedName(SERIALIZED_NAME_BACKEND_VERSION)
  private BigDecimal backendVersion;

  public static final String SERIALIZED_NAME_M_ERROR_MSG = "m_ErrorMsg";
  @SerializedName(SERIALIZED_NAME_M_ERROR_MSG)
  private String mErrorMsg;

  public static final String SERIALIZED_NAME_M_NANO_BACKEND = "m_NanoBackend";
  @SerializedName(SERIALIZED_NAME_M_NANO_BACKEND)
  private MNanoBackend mNanoBackend;

  public MNano() {
  }

  public MNano mNanoConfig(MNanoConfig mNanoConfig) {
    
    this.mNanoConfig = mNanoConfig;
    return this;
  }

   /**
   * Get mNanoConfig
   * @return mNanoConfig
  **/
  @javax.annotation.Nonnull

  public MNanoConfig getmNanoConfig() {
    return mNanoConfig;
  }


  public void setmNanoConfig(MNanoConfig mNanoConfig) {
    this.mNanoConfig = mNanoConfig;
  }


  public MNano magicNumber(BigDecimal magicNumber) {
    
    this.magicNumber = magicNumber;
    return this;
  }

   /**
   * Get magicNumber
   * @return magicNumber
  **/
  @javax.annotation.Nullable

  public BigDecimal getMagicNumber() {
    return magicNumber;
  }


  public void setMagicNumber(BigDecimal magicNumber) {
    this.magicNumber = magicNumber;
  }


  public MNano versionNumber(BigDecimal versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(BigDecimal versionNumber) {
    this.versionNumber = versionNumber;
  }


  public MNano backendVersion(BigDecimal backendVersion) {
    
    this.backendVersion = backendVersion;
    return this;
  }

   /**
   * Get backendVersion
   * @return backendVersion
  **/
  @javax.annotation.Nullable

  public BigDecimal getBackendVersion() {
    return backendVersion;
  }


  public void setBackendVersion(BigDecimal backendVersion) {
    this.backendVersion = backendVersion;
  }


  public MNano mErrorMsg(String mErrorMsg) {
    
    this.mErrorMsg = mErrorMsg;
    return this;
  }

   /**
   * Get mErrorMsg
   * @return mErrorMsg
  **/
  @javax.annotation.Nullable

  public String getmErrorMsg() {
    return mErrorMsg;
  }


  public void setmErrorMsg(String mErrorMsg) {
    this.mErrorMsg = mErrorMsg;
  }


  public MNano mNanoBackend(MNanoBackend mNanoBackend) {
    
    this.mNanoBackend = mNanoBackend;
    return this;
  }

   /**
   * Get mNanoBackend
   * @return mNanoBackend
  **/
  @javax.annotation.Nullable

  public MNanoBackend getmNanoBackend() {
    return mNanoBackend;
  }


  public void setmNanoBackend(MNanoBackend mNanoBackend) {
    this.mNanoBackend = mNanoBackend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MNano mNano = (MNano) o;
    return Objects.equals(this.mNanoConfig, mNano.mNanoConfig) &&
        Objects.equals(this.magicNumber, mNano.magicNumber) &&
        Objects.equals(this.versionNumber, mNano.versionNumber) &&
        Objects.equals(this.backendVersion, mNano.backendVersion) &&
        Objects.equals(this.mErrorMsg, mNano.mErrorMsg) &&
        Objects.equals(this.mNanoBackend, mNano.mNanoBackend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mNanoConfig, magicNumber, versionNumber, backendVersion, mErrorMsg, mNanoBackend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MNano {\n");
    sb.append("    mNanoConfig: ").append(toIndentedString(mNanoConfig)).append("\n");
    sb.append("    magicNumber: ").append(toIndentedString(magicNumber)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    backendVersion: ").append(toIndentedString(backendVersion)).append("\n");
    sb.append("    mErrorMsg: ").append(toIndentedString(mErrorMsg)).append("\n");
    sb.append("    mNanoBackend: ").append(toIndentedString(mNanoBackend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("m_NanoConfig");
    openapiFields.add("magicNumber");
    openapiFields.add("versionNumber");
    openapiFields.add("BackendVersion");
    openapiFields.add("m_ErrorMsg");
    openapiFields.add("m_NanoBackend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("m_NanoConfig");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MNano
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MNano.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MNano is not found in the empty JSON string", MNano.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MNano.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MNano` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MNano.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `m_NanoConfig`
      MNanoConfig.validateJsonObject(jsonObj.getAsJsonObject("m_NanoConfig"));
      if ((jsonObj.get("m_ErrorMsg") != null && !jsonObj.get("m_ErrorMsg").isJsonNull()) && !jsonObj.get("m_ErrorMsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `m_ErrorMsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("m_ErrorMsg").toString()));
      }
      // validate the optional field `m_NanoBackend`
      if (jsonObj.get("m_NanoBackend") != null && !jsonObj.get("m_NanoBackend").isJsonNull()) {
        MNanoBackend.validateJsonObject(jsonObj.getAsJsonObject("m_NanoBackend"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MNano.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MNano' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MNano> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MNano.class));

       return (TypeAdapter<T>) new TypeAdapter<MNano>() {
           @Override
           public void write(JsonWriter out, MNano value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MNano read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MNano given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MNano
  * @throws IOException if the JSON string is invalid with respect to MNano
  */
  public static MNano fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MNano.class);
  }

 /**
  * Convert an instance of MNano to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

