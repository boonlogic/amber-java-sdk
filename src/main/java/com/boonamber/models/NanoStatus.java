/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boonamber.models;

import java.util.Objects;
import java.util.Arrays;
import com.boonamber.models.AmberState;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.boonamber.JSON;

/**
 * NanoStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NanoStatus {
  public static final String SERIALIZED_NAME_PCA = "pca";
  @SerializedName(SERIALIZED_NAME_PCA)
  private List<List<Float>> pca = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_GROWTH = "clusterGrowth";
  @SerializedName(SERIALIZED_NAME_CLUSTER_GROWTH)
  private List<BigDecimal> clusterGrowth = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_SIZES = "clusterSizes";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SIZES)
  private List<BigDecimal> clusterSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANOMALY_INDEXES = "anomalyIndexes";
  @SerializedName(SERIALIZED_NAME_ANOMALY_INDEXES)
  private List<BigDecimal> anomalyIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FREQUENCY_INDEXES = "frequencyIndexes";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_INDEXES)
  private List<BigDecimal> frequencyIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTANCE_INDEXES = "distanceIndexes";
  @SerializedName(SERIALIZED_NAME_DISTANCE_INDEXES)
  private List<BigDecimal> distanceIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_COUNT = "sampleCount";
  @SerializedName(SERIALIZED_NAME_SAMPLE_COUNT)
  private Integer sampleCount;

  public static final String SERIALIZED_NAME_CLUSTER_COUNT = "clusterCount";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COUNT)
  private Integer clusterCount;

  public static final String SERIALIZED_NAME_ANOMALY_THRESHOLD = "anomalyThreshold";
  @SerializedName(SERIALIZED_NAME_ANOMALY_THRESHOLD)
  private Integer anomalyThreshold;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AmberState state;

  public NanoStatus() {
  }

  public NanoStatus pca(List<List<Float>> pca) {
    
    this.pca = pca;
    return this;
  }

  public NanoStatus addPcaItem(List<Float> pcaItem) {
    if (this.pca == null) {
      this.pca = new ArrayList<>();
    }
    this.pca.add(pcaItem);
    return this;
  }

   /**
   * pca
   * @return pca
  **/
  @javax.annotation.Nullable

  public List<List<Float>> getPca() {
    return pca;
  }


  public void setPca(List<List<Float>> pca) {
    this.pca = pca;
  }


  public NanoStatus clusterGrowth(List<BigDecimal> clusterGrowth) {
    
    this.clusterGrowth = clusterGrowth;
    return this;
  }

  public NanoStatus addClusterGrowthItem(BigDecimal clusterGrowthItem) {
    if (this.clusterGrowth == null) {
      this.clusterGrowth = new ArrayList<>();
    }
    this.clusterGrowth.add(clusterGrowthItem);
    return this;
  }

   /**
   * cluster growth
   * @return clusterGrowth
  **/
  @javax.annotation.Nullable

  public List<BigDecimal> getClusterGrowth() {
    return clusterGrowth;
  }


  public void setClusterGrowth(List<BigDecimal> clusterGrowth) {
    this.clusterGrowth = clusterGrowth;
  }


  public NanoStatus clusterSizes(List<BigDecimal> clusterSizes) {
    
    this.clusterSizes = clusterSizes;
    return this;
  }

  public NanoStatus addClusterSizesItem(BigDecimal clusterSizesItem) {
    if (this.clusterSizes == null) {
      this.clusterSizes = new ArrayList<>();
    }
    this.clusterSizes.add(clusterSizesItem);
    return this;
  }

   /**
   * cluster sizes
   * @return clusterSizes
  **/
  @javax.annotation.Nullable

  public List<BigDecimal> getClusterSizes() {
    return clusterSizes;
  }


  public void setClusterSizes(List<BigDecimal> clusterSizes) {
    this.clusterSizes = clusterSizes;
  }


  public NanoStatus anomalyIndexes(List<BigDecimal> anomalyIndexes) {
    
    this.anomalyIndexes = anomalyIndexes;
    return this;
  }

  public NanoStatus addAnomalyIndexesItem(BigDecimal anomalyIndexesItem) {
    if (this.anomalyIndexes == null) {
      this.anomalyIndexes = new ArrayList<>();
    }
    this.anomalyIndexes.add(anomalyIndexesItem);
    return this;
  }

   /**
   * anomaly indexes
   * @return anomalyIndexes
  **/
  @javax.annotation.Nullable

  public List<BigDecimal> getAnomalyIndexes() {
    return anomalyIndexes;
  }


  public void setAnomalyIndexes(List<BigDecimal> anomalyIndexes) {
    this.anomalyIndexes = anomalyIndexes;
  }


  public NanoStatus frequencyIndexes(List<BigDecimal> frequencyIndexes) {
    
    this.frequencyIndexes = frequencyIndexes;
    return this;
  }

  public NanoStatus addFrequencyIndexesItem(BigDecimal frequencyIndexesItem) {
    if (this.frequencyIndexes == null) {
      this.frequencyIndexes = new ArrayList<>();
    }
    this.frequencyIndexes.add(frequencyIndexesItem);
    return this;
  }

   /**
   * frequency indexes
   * @return frequencyIndexes
  **/
  @javax.annotation.Nullable

  public List<BigDecimal> getFrequencyIndexes() {
    return frequencyIndexes;
  }


  public void setFrequencyIndexes(List<BigDecimal> frequencyIndexes) {
    this.frequencyIndexes = frequencyIndexes;
  }


  public NanoStatus distanceIndexes(List<BigDecimal> distanceIndexes) {
    
    this.distanceIndexes = distanceIndexes;
    return this;
  }

  public NanoStatus addDistanceIndexesItem(BigDecimal distanceIndexesItem) {
    if (this.distanceIndexes == null) {
      this.distanceIndexes = new ArrayList<>();
    }
    this.distanceIndexes.add(distanceIndexesItem);
    return this;
  }

   /**
   * distance indexes
   * @return distanceIndexes
  **/
  @javax.annotation.Nullable

  public List<BigDecimal> getDistanceIndexes() {
    return distanceIndexes;
  }


  public void setDistanceIndexes(List<BigDecimal> distanceIndexes) {
    this.distanceIndexes = distanceIndexes;
  }


  public NanoStatus sampleCount(Integer sampleCount) {
    
    this.sampleCount = sampleCount;
    return this;
  }

   /**
   * Total number of patterns processed since configuration.
   * @return sampleCount
  **/
  @javax.annotation.Nullable

  public Integer getSampleCount() {
    return sampleCount;
  }


  public void setSampleCount(Integer sampleCount) {
    this.sampleCount = sampleCount;
  }


  public NanoStatus clusterCount(Integer clusterCount) {
    
    this.clusterCount = clusterCount;
    return this;
  }

   /**
   * Total number of clusters generated by patterns so far.
   * @return clusterCount
  **/
  @javax.annotation.Nullable

  public Integer getClusterCount() {
    return clusterCount;
  }


  public void setClusterCount(Integer clusterCount) {
    this.clusterCount = clusterCount;
  }


  public NanoStatus anomalyThreshold(Integer anomalyThreshold) {
    
    this.anomalyThreshold = anomalyThreshold;
    return this;
  }

   /**
   * anomaly threshold
   * @return anomalyThreshold
  **/
  @javax.annotation.Nullable

  public Integer getAnomalyThreshold() {
    return anomalyThreshold;
  }


  public void setAnomalyThreshold(Integer anomalyThreshold) {
    this.anomalyThreshold = anomalyThreshold;
  }


  public NanoStatus state(AmberState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public AmberState getState() {
    return state;
  }


  public void setState(AmberState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NanoStatus nanoStatus = (NanoStatus) o;
    return Objects.equals(this.pca, nanoStatus.pca) &&
        Objects.equals(this.clusterGrowth, nanoStatus.clusterGrowth) &&
        Objects.equals(this.clusterSizes, nanoStatus.clusterSizes) &&
        Objects.equals(this.anomalyIndexes, nanoStatus.anomalyIndexes) &&
        Objects.equals(this.frequencyIndexes, nanoStatus.frequencyIndexes) &&
        Objects.equals(this.distanceIndexes, nanoStatus.distanceIndexes) &&
        Objects.equals(this.sampleCount, nanoStatus.sampleCount) &&
        Objects.equals(this.clusterCount, nanoStatus.clusterCount) &&
        Objects.equals(this.anomalyThreshold, nanoStatus.anomalyThreshold) &&
        Objects.equals(this.state, nanoStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pca, clusterGrowth, clusterSizes, anomalyIndexes, frequencyIndexes, distanceIndexes, sampleCount, clusterCount, anomalyThreshold, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NanoStatus {\n");
    sb.append("    pca: ").append(toIndentedString(pca)).append("\n");
    sb.append("    clusterGrowth: ").append(toIndentedString(clusterGrowth)).append("\n");
    sb.append("    clusterSizes: ").append(toIndentedString(clusterSizes)).append("\n");
    sb.append("    anomalyIndexes: ").append(toIndentedString(anomalyIndexes)).append("\n");
    sb.append("    frequencyIndexes: ").append(toIndentedString(frequencyIndexes)).append("\n");
    sb.append("    distanceIndexes: ").append(toIndentedString(distanceIndexes)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    anomalyThreshold: ").append(toIndentedString(anomalyThreshold)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pca");
    openapiFields.add("clusterGrowth");
    openapiFields.add("clusterSizes");
    openapiFields.add("anomalyIndexes");
    openapiFields.add("frequencyIndexes");
    openapiFields.add("distanceIndexes");
    openapiFields.add("sampleCount");
    openapiFields.add("clusterCount");
    openapiFields.add("anomalyThreshold");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NanoStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NanoStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NanoStatus is not found in the empty JSON string", NanoStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NanoStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NanoStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pca") != null && !jsonObj.get("pca").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pca` to be an array in the JSON string but got `%s`", jsonObj.get("pca").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterGrowth") != null && !jsonObj.get("clusterGrowth").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterGrowth` to be an array in the JSON string but got `%s`", jsonObj.get("clusterGrowth").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterSizes") != null && !jsonObj.get("clusterSizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterSizes` to be an array in the JSON string but got `%s`", jsonObj.get("clusterSizes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anomalyIndexes") != null && !jsonObj.get("anomalyIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anomalyIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("anomalyIndexes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("frequencyIndexes") != null && !jsonObj.get("frequencyIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequencyIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("frequencyIndexes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("distanceIndexes") != null && !jsonObj.get("distanceIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `distanceIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("distanceIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NanoStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NanoStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NanoStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NanoStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<NanoStatus>() {
           @Override
           public void write(JsonWriter out, NanoStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NanoStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NanoStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NanoStatus
  * @throws IOException if the JSON string is invalid with respect to NanoStatus
  */
  public static NanoStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NanoStatus.class);
  }

 /**
  * Convert an instance of NanoStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

