/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.GetConfigResponse;
import io.swagger.client.model.GetPretrainResponse;
import io.swagger.client.model.GetRootCauseResponse;
import io.swagger.client.model.GetSensorResponse;
import io.swagger.client.model.GetSensorsResponse;
import io.swagger.client.model.GetStatusResponse;
import io.swagger.client.model.GetSummaryResponse;
import io.swagger.client.model.PostAuth2Request;
import io.swagger.client.model.PostAuth2Response;
import io.swagger.client.model.PostConfigRequest;
import io.swagger.client.model.PostConfigResponse;
import io.swagger.client.model.PostOutageResponse;
import io.swagger.client.model.PostPretrainRequest;
import io.swagger.client.model.PostPretrainResponse;
import io.swagger.client.model.PostSensorRequest;
import io.swagger.client.model.PostSensorResponse;
import io.swagger.client.model.PostStreamRequest;
import io.swagger.client.model.PostStreamResponse;
import io.swagger.client.model.PutConfigRequest;
import io.swagger.client.model.PutConfigResponse;
import io.swagger.client.model.PutSensorRequest;
import io.swagger.client.model.PutSensorResponse;
import io.swagger.client.model.PutStreamRequest;
import io.swagger.client.model.PutStreamResponse;
import io.swagger.client.model.Version;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteSensor
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSensorCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSensorValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling deleteSensor(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSensorCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a sensor instance
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Error deleteSensor(String sensorId) throws ApiException {
        ApiResponse<Error> resp = deleteSensorWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Delete a sensor instance
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Error> deleteSensorWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSensorValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a sensor instance (asynchronously)
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSensorAsync(String sensorId, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSensorValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAmberSummary
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAmberSummaryCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/__summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAmberSummaryValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getAmberSummary(Async)");
        }
        
        com.squareup.okhttp.Call call = getAmberSummaryCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the JSON block of the amber image
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @return GetSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSummaryResponse getAmberSummary(String sensorId) throws ApiException {
        ApiResponse<GetSummaryResponse> resp = getAmberSummaryWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Get the JSON block of the amber image
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSummaryResponse> getAmberSummaryWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = getAmberSummaryValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<GetSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the JSON block of the amber image (asynchronously)
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAmberSummaryAsync(String sensorId, final ApiCallback<GetSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAmberSummaryValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfig
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = getConfigCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the current configuration of a sensor instance
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConfigResponse getConfig(String sensorId) throws ApiException {
        ApiResponse<GetConfigResponse> resp = getConfigWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Get the current configuration of a sensor instance
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConfigResponse> getConfigWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = getConfigValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<GetConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current configuration of a sensor instance (asynchronously)
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigAsync(String sensorId, final ApiCallback<GetConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPretrain
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPretrainCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pretrain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPretrainValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getPretrain(Async)");
        }
        
        com.squareup.okhttp.Call call = getPretrainCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get status of pretrain operation
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetPretrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPretrainResponse getPretrain(String sensorId) throws ApiException {
        ApiResponse<GetPretrainResponse> resp = getPretrainWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Get status of pretrain operation
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetPretrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPretrainResponse> getPretrainWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = getPretrainValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<GetPretrainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get status of pretrain operation (asynchronously)
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPretrainAsync(String sensorId, final ApiCallback<GetPretrainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPretrainValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPretrainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRootCause
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRootCauseCall(String sensorId, String clusterID, String pattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rootCause";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterID", clusterID));
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRootCauseValidateBeforeCall(String sensorId, String clusterID, String pattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getRootCause(Async)");
        }
        
        com.squareup.okhttp.Call call = getRootCauseCall(sensorId, clusterID, pattern, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get root cause analysis information from a sensor
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @return GetRootCauseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetRootCauseResponse getRootCause(String sensorId, String clusterID, String pattern) throws ApiException {
        ApiResponse<GetRootCauseResponse> resp = getRootCauseWithHttpInfo(sensorId, clusterID, pattern);
        return resp.getData();
    }

    /**
     * Get root cause analysis information from a sensor
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @return ApiResponse&lt;GetRootCauseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetRootCauseResponse> getRootCauseWithHttpInfo(String sensorId, String clusterID, String pattern) throws ApiException {
        com.squareup.okhttp.Call call = getRootCauseValidateBeforeCall(sensorId, clusterID, pattern, null, null);
        Type localVarReturnType = new TypeToken<GetRootCauseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get root cause analysis information from a sensor (asynchronously)
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRootCauseAsync(String sensorId, String clusterID, String pattern, final ApiCallback<GetRootCauseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRootCauseValidateBeforeCall(sensorId, clusterID, pattern, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetRootCauseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSensor
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSensorCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSensorValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getSensor(Async)");
        }
        
        com.squareup.okhttp.Call call = getSensorCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get basic information about a sensor instance
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSensorResponse getSensor(String sensorId) throws ApiException {
        ApiResponse<GetSensorResponse> resp = getSensorWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Get basic information about a sensor instance
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSensorResponse> getSensorWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = getSensorValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<GetSensorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get basic information about a sensor instance (asynchronously)
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSensorAsync(String sensorId, final ApiCallback<GetSensorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSensorValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSensorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSensors
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSensorsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sensors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSensorsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSensorsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all sensors for this user
     * Returns a list of all current sensor instances for this user.
     * @return GetSensorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSensorsResponse getSensors() throws ApiException {
        ApiResponse<GetSensorsResponse> resp = getSensorsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all sensors for this user
     * Returns a list of all current sensor instances for this user.
     * @return ApiResponse&lt;GetSensorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSensorsResponse> getSensorsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSensorsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetSensorsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all sensors for this user (asynchronously)
     * Returns a list of all current sensor instances for this user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSensorsAsync(final ApiCallback<GetSensorsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSensorsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSensorsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatus
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatusCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatusValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getStatusCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get analytic information from a sensor
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetStatusResponse getStatus(String sensorId) throws ApiException {
        ApiResponse<GetStatusResponse> resp = getStatusWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Get analytic information from a sensor
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetStatusResponse> getStatusWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = getStatusValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<GetStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get analytic information from a sensor (asynchronously)
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatusAsync(String sensorId, final ApiCallback<GetStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatusValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersion
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getVersionCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves API version information
     * 
     * @return Version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Version getVersion() throws ApiException {
        ApiResponse<Version> resp = getVersionWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves API version information
     * 
     * @return ApiResponse&lt;Version&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Version> getVersionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVersionValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves API version information (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionAsync(final ApiCallback<Version> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postConfig
     * @param body Sensor configuration to be applied (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigCall(PostConfigRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigValidateBeforeCall(PostConfigRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postConfig(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = postConfigCall(body, sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Apply configuration to a sensor instance
     * Applies the provided configuration to the sensor instance specified.
     * @param body Sensor configuration to be applied (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return PostConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostConfigResponse postConfig(PostConfigRequest body, String sensorId) throws ApiException {
        ApiResponse<PostConfigResponse> resp = postConfigWithHttpInfo(body, sensorId);
        return resp.getData();
    }

    /**
     * Apply configuration to a sensor instance
     * Applies the provided configuration to the sensor instance specified.
     * @param body Sensor configuration to be applied (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PostConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostConfigResponse> postConfigWithHttpInfo(PostConfigRequest body, String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = postConfigValidateBeforeCall(body, sensorId, null, null);
        Type localVarReturnType = new TypeToken<PostConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply configuration to a sensor instance (asynchronously)
     * Applies the provided configuration to the sensor instance specified.
     * @param body Sensor configuration to be applied (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigAsync(PostConfigRequest body, String sensorId, final ApiCallback<PostConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigValidateBeforeCall(body, sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOauth2
     * @param body Account credentials to be used for authentication (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOauth2Call(PostAuth2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOauth2ValidateBeforeCall(PostAuth2Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOauth2(Async)");
        }
        
        com.squareup.okhttp.Call call = postOauth2Call(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request a bearer token using Amber account credentials
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param body Account credentials to be used for authentication (required)
     * @return PostAuth2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostAuth2Response postOauth2(PostAuth2Request body) throws ApiException {
        ApiResponse<PostAuth2Response> resp = postOauth2WithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Request a bearer token using Amber account credentials
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param body Account credentials to be used for authentication (required)
     * @return ApiResponse&lt;PostAuth2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostAuth2Response> postOauth2WithHttpInfo(PostAuth2Request body) throws ApiException {
        com.squareup.okhttp.Call call = postOauth2ValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PostAuth2Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request a bearer token using Amber account credentials (asynchronously)
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param body Account credentials to be used for authentication (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOauth2Async(PostAuth2Request body, final ApiCallback<PostAuth2Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOauth2ValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostAuth2Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOutage
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOutageCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/outage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOutageValidateBeforeCall(String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postOutage(Async)");
        }
        
        com.squareup.okhttp.Call call = postOutageCall(sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Informs the server of an outage
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @return PostOutageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostOutageResponse postOutage(String sensorId) throws ApiException {
        ApiResponse<PostOutageResponse> resp = postOutageWithHttpInfo(sensorId);
        return resp.getData();
    }

    /**
     * Informs the server of an outage
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PostOutageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostOutageResponse> postOutageWithHttpInfo(String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = postOutageValidateBeforeCall(sensorId, null, null);
        Type localVarReturnType = new TypeToken<PostOutageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Informs the server of an outage (asynchronously)
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOutageAsync(String sensorId, final ApiCallback<PostOutageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOutageValidateBeforeCall(sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostOutageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPretrain
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPretrainCall(PostPretrainRequest body, String sensorId, String amberChunk, String amberTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pretrain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));
        if (amberChunk != null)
        localVarHeaderParams.put("amberChunk", apiClient.parameterToString(amberChunk));
        if (amberTransaction != null)
        localVarHeaderParams.put("amberTransaction", apiClient.parameterToString(amberTransaction));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPretrainValidateBeforeCall(PostPretrainRequest body, String sensorId, String amberChunk, String amberTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPretrain(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postPretrain(Async)");
        }
        
        com.squareup.okhttp.Call call = postPretrainCall(body, sensorId, amberChunk, amberTransaction, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pretrain a sensor using historical data
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @return PostPretrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostPretrainResponse postPretrain(PostPretrainRequest body, String sensorId, String amberChunk, String amberTransaction) throws ApiException {
        ApiResponse<PostPretrainResponse> resp = postPretrainWithHttpInfo(body, sensorId, amberChunk, amberTransaction);
        return resp.getData();
    }

    /**
     * Pretrain a sensor using historical data
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @return ApiResponse&lt;PostPretrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostPretrainResponse> postPretrainWithHttpInfo(PostPretrainRequest body, String sensorId, String amberChunk, String amberTransaction) throws ApiException {
        com.squareup.okhttp.Call call = postPretrainValidateBeforeCall(body, sensorId, amberChunk, amberTransaction, null, null);
        Type localVarReturnType = new TypeToken<PostPretrainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pretrain a sensor using historical data (asynchronously)
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPretrainAsync(PostPretrainRequest body, String sensorId, String amberChunk, String amberTransaction, final ApiCallback<PostPretrainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPretrainValidateBeforeCall(body, sensorId, amberChunk, amberTransaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostPretrainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSensor
     * @param body Label for new sensor instance to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSensorCall(PostSensorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSensorValidateBeforeCall(PostSensorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSensor(Async)");
        }
        
        com.squareup.okhttp.Call call = postSensorCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new a sensor instance
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param body Label for new sensor instance to be created (required)
     * @return PostSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostSensorResponse postSensor(PostSensorRequest body) throws ApiException {
        ApiResponse<PostSensorResponse> resp = postSensorWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new a sensor instance
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param body Label for new sensor instance to be created (required)
     * @return ApiResponse&lt;PostSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostSensorResponse> postSensorWithHttpInfo(PostSensorRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postSensorValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PostSensorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new a sensor instance (asynchronously)
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param body Label for new sensor instance to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSensorAsync(PostSensorRequest body, final ApiCallback<PostSensorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSensorValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostSensorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postStream
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postStreamCall(PostStreamRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postStreamValidateBeforeCall(PostStreamRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postStream(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postStream(Async)");
        }
        
        com.squareup.okhttp.Call call = postStreamCall(body, sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stream data to a sensor
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return PostStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostStreamResponse postStream(PostStreamRequest body, String sensorId) throws ApiException {
        ApiResponse<PostStreamResponse> resp = postStreamWithHttpInfo(body, sensorId);
        return resp.getData();
    }

    /**
     * Stream data to a sensor
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PostStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostStreamResponse> postStreamWithHttpInfo(PostStreamRequest body, String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = postStreamValidateBeforeCall(body, sensorId, null, null);
        Type localVarReturnType = new TypeToken<PostStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stream data to a sensor (asynchronously)
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
     * @param body Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;). (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postStreamAsync(PostStreamRequest body, String sensorId, final ApiCallback<PostStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postStreamValidateBeforeCall(body, sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putConfig
     * @param body Updates to sensor configuration (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putConfigCall(PutConfigRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putConfigValidateBeforeCall(PutConfigRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putConfig(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = putConfigCall(body, sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update configuration for a sensor instance
     * Updates the configuration for the sensor instance specified.
     * @param body Updates to sensor configuration (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return PutConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutConfigResponse putConfig(PutConfigRequest body, String sensorId) throws ApiException {
        ApiResponse<PutConfigResponse> resp = putConfigWithHttpInfo(body, sensorId);
        return resp.getData();
    }

    /**
     * Update configuration for a sensor instance
     * Updates the configuration for the sensor instance specified.
     * @param body Updates to sensor configuration (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PutConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutConfigResponse> putConfigWithHttpInfo(PutConfigRequest body, String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = putConfigValidateBeforeCall(body, sensorId, null, null);
        Type localVarReturnType = new TypeToken<PutConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update configuration for a sensor instance (asynchronously)
     * Updates the configuration for the sensor instance specified.
     * @param body Updates to sensor configuration (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putConfigAsync(PutConfigRequest body, String sensorId, final ApiCallback<PutConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putConfigValidateBeforeCall(body, sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSensor
     * @param body New label to apply to sensor instance (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSensorCall(PutSensorRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSensorValidateBeforeCall(PutSensorRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSensor(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putSensor(Async)");
        }
        
        com.squareup.okhttp.Call call = putSensorCall(body, sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update label for a sensor instance
     * Changes the label of an existing sensor instance to the new label specified.
     * @param body New label to apply to sensor instance (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return PutSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutSensorResponse putSensor(PutSensorRequest body, String sensorId) throws ApiException {
        ApiResponse<PutSensorResponse> resp = putSensorWithHttpInfo(body, sensorId);
        return resp.getData();
    }

    /**
     * Update label for a sensor instance
     * Changes the label of an existing sensor instance to the new label specified.
     * @param body New label to apply to sensor instance (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PutSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutSensorResponse> putSensorWithHttpInfo(PutSensorRequest body, String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = putSensorValidateBeforeCall(body, sensorId, null, null);
        Type localVarReturnType = new TypeToken<PutSensorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update label for a sensor instance (asynchronously)
     * Changes the label of an existing sensor instance to the new label specified.
     * @param body New label to apply to sensor instance (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSensorAsync(PutSensorRequest body, String sensorId, final ApiCallback<PutSensorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSensorValidateBeforeCall(body, sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutSensorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putStream
     * @param body New values for sensor fusion vector. (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putStreamCall(PutStreamRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sensorId != null)
        localVarHeaderParams.put("sensorId", apiClient.parameterToString(sensorId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putStreamValidateBeforeCall(PutStreamRequest body, String sensorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putStream(Async)");
        }
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putStream(Async)");
        }
        
        com.squareup.okhttp.Call call = putStreamCall(body, sensorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stream data to a sensor fusion vector
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param body New values for sensor fusion vector. (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return PutStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutStreamResponse putStream(PutStreamRequest body, String sensorId) throws ApiException {
        ApiResponse<PutStreamResponse> resp = putStreamWithHttpInfo(body, sensorId);
        return resp.getData();
    }

    /**
     * Stream data to a sensor fusion vector
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param body New values for sensor fusion vector. (required)
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PutStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutStreamResponse> putStreamWithHttpInfo(PutStreamRequest body, String sensorId) throws ApiException {
        com.squareup.okhttp.Call call = putStreamValidateBeforeCall(body, sensorId, null, null);
        Type localVarReturnType = new TypeToken<PutStreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stream data to a sensor fusion vector (asynchronously)
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param body New values for sensor fusion vector. (required)
     * @param sensorId Unique identifier for sensor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStreamAsync(PutStreamRequest body, String sensorId, final ApiCallback<PutStreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStreamValidateBeforeCall(body, sensorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutStreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
