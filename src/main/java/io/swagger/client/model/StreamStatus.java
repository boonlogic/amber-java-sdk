/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * StreamStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-20T15:52:03.807427-05:00[America/Chicago]")
public class StreamStatus {
  @SerializedName("state")
  private String state = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("progress")
  private BigDecimal progress = null;

  @SerializedName("clusterCount")
  private BigDecimal clusterCount = null;

  @SerializedName("retryCount")
  private BigDecimal retryCount = null;

  @SerializedName("streamingWindowSize")
  private BigDecimal streamingWindowSize = null;

  @SerializedName("totalInferences")
  private BigDecimal totalInferences = null;

  public StreamStatus state(String state) {
    this.state = state;
    return this;
  }

   /**
   * state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry
   * @return state
  **/
  @Schema(required = true, description = "state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public StreamStatus message(String message) {
    this.message = message;
    return this;
  }

   /**
   * message to accompany the current state
   * @return message
  **/
  @Schema(required = true, description = "message to accompany the current state")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public StreamStatus progress(BigDecimal progress) {
    this.progress = progress;
    return this;
  }

   /**
   * completion percentage (applies to Buffering and Autotuning states)
   * @return progress
  **/
  @Schema(required = true, description = "completion percentage (applies to Buffering and Autotuning states)")
  public BigDecimal getProgress() {
    return progress;
  }

  public void setProgress(BigDecimal progress) {
    this.progress = progress;
  }

  public StreamStatus clusterCount(BigDecimal clusterCount) {
    this.clusterCount = clusterCount;
    return this;
  }

   /**
   * current cluster count (applies to Learning and Monitoring states)
   * @return clusterCount
  **/
  @Schema(required = true, description = "current cluster count (applies to Learning and Monitoring states)")
  public BigDecimal getClusterCount() {
    return clusterCount;
  }

  public void setClusterCount(BigDecimal clusterCount) {
    this.clusterCount = clusterCount;
  }

  public StreamStatus retryCount(BigDecimal retryCount) {
    this.retryCount = retryCount;
    return this;
  }

   /**
   * number of restarts that have happened during autotuning
   * @return retryCount
  **/
  @Schema(required = true, description = "number of restarts that have happened during autotuning")
  public BigDecimal getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(BigDecimal retryCount) {
    this.retryCount = retryCount;
  }

  public StreamStatus streamingWindowSize(BigDecimal streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
    return this;
  }

   /**
   * the current streaming window size that is being used
   * @return streamingWindowSize
  **/
  @Schema(required = true, description = "the current streaming window size that is being used")
  public BigDecimal getStreamingWindowSize() {
    return streamingWindowSize;
  }

  public void setStreamingWindowSize(BigDecimal streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
  }

  public StreamStatus totalInferences(BigDecimal totalInferences) {
    this.totalInferences = totalInferences;
    return this;
  }

   /**
   * inferences since the most recent restart
   * @return totalInferences
  **/
  @Schema(required = true, description = "inferences since the most recent restart")
  public BigDecimal getTotalInferences() {
    return totalInferences;
  }

  public void setTotalInferences(BigDecimal totalInferences) {
    this.totalInferences = totalInferences;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamStatus streamStatus = (StreamStatus) o;
    return Objects.equals(this.state, streamStatus.state) &&
        Objects.equals(this.message, streamStatus.message) &&
        Objects.equals(this.progress, streamStatus.progress) &&
        Objects.equals(this.clusterCount, streamStatus.clusterCount) &&
        Objects.equals(this.retryCount, streamStatus.retryCount) &&
        Objects.equals(this.streamingWindowSize, streamStatus.streamingWindowSize) &&
        Objects.equals(this.totalInferences, streamStatus.totalInferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, message, progress, clusterCount, retryCount, streamingWindowSize, totalInferences);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamStatus {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    streamingWindowSize: ").append(toIndentedString(streamingWindowSize)).append("\n");
    sb.append("    totalInferences: ").append(toIndentedString(totalInferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
