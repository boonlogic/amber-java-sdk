/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PostPretrainResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-20T15:52:03.807427-05:00[America/Chicago]")
public class PostPretrainResponse {
  @SerializedName("state")
  private String state = null;

  @SerializedName("amberTransaction")
  private String amberTransaction = null;

  @SerializedName("amberChunk")
  private String amberChunk = null;

  @SerializedName("message")
  private String message = null;

  public PostPretrainResponse state(String state) {
    this.state = state;
    return this;
  }

   /**
   * state of pretraining, one of: Chunking, Pretraining, Pretrained, Error
   * @return state
  **/
  @Schema(required = true, description = "state of pretraining, one of: Chunking, Pretraining, Pretrained, Error")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public PostPretrainResponse amberTransaction(String amberTransaction) {
    this.amberTransaction = amberTransaction;
    return this;
  }

   /**
   * Get amberTransaction
   * @return amberTransaction
  **/
  @Schema(description = "")
  public String getAmberTransaction() {
    return amberTransaction;
  }

  public void setAmberTransaction(String amberTransaction) {
    this.amberTransaction = amberTransaction;
  }

  public PostPretrainResponse amberChunk(String amberChunk) {
    this.amberChunk = amberChunk;
    return this;
  }

   /**
   * Get amberChunk
   * @return amberChunk
  **/
  @Schema(description = "")
  public String getAmberChunk() {
    return amberChunk;
  }

  public void setAmberChunk(String amberChunk) {
    this.amberChunk = amberChunk;
  }

  public PostPretrainResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * latest pretrain message
   * @return message
  **/
  @Schema(description = "latest pretrain message")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPretrainResponse postPretrainResponse = (PostPretrainResponse) o;
    return Objects.equals(this.state, postPretrainResponse.state) &&
        Objects.equals(this.amberTransaction, postPretrainResponse.amberTransaction) &&
        Objects.equals(this.amberChunk, postPretrainResponse.amberChunk) &&
        Objects.equals(this.message, postPretrainResponse.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, amberTransaction, amberChunk, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPretrainResponse {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    amberTransaction: ").append(toIndentedString(amberTransaction)).append("\n");
    sb.append("    amberChunk: ").append(toIndentedString(amberChunk)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
