/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FeatureConfig;
import io.swagger.client.model.StreamingParameters;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * PostConfigRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-20T15:52:03.807427-05:00[America/Chicago]")
public class PostConfigRequest extends StreamingParameters {
  @SerializedName("featureCount")
  private Integer featureCount = null;

  @SerializedName("streamingWindowSize")
  private Integer streamingWindowSize = null;

  @SerializedName("features")
  private List<FeatureConfig> features = null;

  @SerializedName("samplesToBuffer")
  private BigDecimal samplesToBuffer = null;

  @SerializedName("percentVariationOverride")
  private Float percentVariationOverride = -1.0f;

  public PostConfigRequest featureCount(Integer featureCount) {
    this.featureCount = featureCount;
    return this;
  }

   /**
   * number of features per sample
   * minimum: 1
   * @return featureCount
  **/
  @Schema(required = true, description = "number of features per sample")
  public Integer getFeatureCount() {
    return featureCount;
  }

  public void setFeatureCount(Integer featureCount) {
    this.featureCount = featureCount;
  }

  public PostConfigRequest streamingWindowSize(Integer streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
    return this;
  }

   /**
   * streaming window size
   * maximum: 500
   * @return streamingWindowSize
  **/
  @Schema(required = true, description = "streaming window size")
  public Integer getStreamingWindowSize() {
    return streamingWindowSize;
  }

  public void setStreamingWindowSize(Integer streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
  }

  public PostConfigRequest features(List<FeatureConfig> features) {
    this.features = features;
    return this;
  }

  public PostConfigRequest addFeaturesItem(FeatureConfig featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<FeatureConfig>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @Schema(description = "")
  public List<FeatureConfig> getFeatures() {
    return features;
  }

  public void setFeatures(List<FeatureConfig> features) {
    this.features = features;
  }

  public PostConfigRequest samplesToBuffer(BigDecimal samplesToBuffer) {
    this.samplesToBuffer = samplesToBuffer;
    return this;
  }

   /**
   * the number of samples to be applied before autotuning begins
   * @return samplesToBuffer
  **/
  @Schema(description = "the number of samples to be applied before autotuning begins")
  public BigDecimal getSamplesToBuffer() {
    return samplesToBuffer;
  }

  public void setSamplesToBuffer(BigDecimal samplesToBuffer) {
    this.samplesToBuffer = samplesToBuffer;
  }

  public PostConfigRequest percentVariationOverride(Float percentVariationOverride) {
    this.percentVariationOverride = percentVariationOverride;
    return this;
  }

   /**
   * override autotuned percent variation with this value
   * @return percentVariationOverride
  **/
  @Schema(description = "override autotuned percent variation with this value")
  public Float getPercentVariationOverride() {
    return percentVariationOverride;
  }

  public void setPercentVariationOverride(Float percentVariationOverride) {
    this.percentVariationOverride = percentVariationOverride;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostConfigRequest postConfigRequest = (PostConfigRequest) o;
    return Objects.equals(this.featureCount, postConfigRequest.featureCount) &&
        Objects.equals(this.streamingWindowSize, postConfigRequest.streamingWindowSize) &&
        Objects.equals(this.features, postConfigRequest.features) &&
        Objects.equals(this.samplesToBuffer, postConfigRequest.samplesToBuffer) &&
        Objects.equals(this.percentVariationOverride, postConfigRequest.percentVariationOverride) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featureCount, streamingWindowSize, features, samplesToBuffer, percentVariationOverride, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostConfigRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    featureCount: ").append(toIndentedString(featureCount)).append("\n");
    sb.append("    streamingWindowSize: ").append(toIndentedString(streamingWindowSize)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    samplesToBuffer: ").append(toIndentedString(samplesToBuffer)).append("\n");
    sb.append("    percentVariationOverride: ").append(toIndentedString(percentVariationOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
