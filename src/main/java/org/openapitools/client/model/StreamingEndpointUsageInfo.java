/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamingEndpointUsageInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T09:54:04.469994-06:00[America/Chicago]")
public class StreamingEndpointUsageInfo {
  public static final String SERIALIZED_NAME_CALLS_TOTAL = "callsTotal";
  @SerializedName(SERIALIZED_NAME_CALLS_TOTAL)
  private Integer callsTotal;

  public static final String SERIALIZED_NAME_CALLS_THIS_PERIOD = "callsThisPeriod";
  @SerializedName(SERIALIZED_NAME_CALLS_THIS_PERIOD)
  private Integer callsThisPeriod;

  public static final String SERIALIZED_NAME_SAMPLES_TOTAL = "samplesTotal";
  @SerializedName(SERIALIZED_NAME_SAMPLES_TOTAL)
  private Integer samplesTotal;

  public static final String SERIALIZED_NAME_SAMPLES_THIS_PERIOD = "samplesThisPeriod";
  @SerializedName(SERIALIZED_NAME_SAMPLES_THIS_PERIOD)
  private Integer samplesThisPeriod;

  public static final String SERIALIZED_NAME_LAST_CALLED = "lastCalled";
  @SerializedName(SERIALIZED_NAME_LAST_CALLED)
  private String lastCalled;

  public StreamingEndpointUsageInfo() {
  }

  public StreamingEndpointUsageInfo callsTotal(Integer callsTotal) {
    
    this.callsTotal = callsTotal;
    return this;
  }

   /**
   * total number of calls to this endpoint
   * @return callsTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "total number of calls to this endpoint")

  public Integer getCallsTotal() {
    return callsTotal;
  }


  public void setCallsTotal(Integer callsTotal) {
    this.callsTotal = callsTotal;
  }


  public StreamingEndpointUsageInfo callsThisPeriod(Integer callsThisPeriod) {
    
    this.callsThisPeriod = callsThisPeriod;
    return this;
  }

   /**
   * number of calls to this endpoint during the current billing period
   * @return callsThisPeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "number of calls to this endpoint during the current billing period")

  public Integer getCallsThisPeriod() {
    return callsThisPeriod;
  }


  public void setCallsThisPeriod(Integer callsThisPeriod) {
    this.callsThisPeriod = callsThisPeriod;
  }


  public StreamingEndpointUsageInfo samplesTotal(Integer samplesTotal) {
    
    this.samplesTotal = samplesTotal;
    return this;
  }

   /**
   * total number of samples processed
   * @return samplesTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "total number of samples processed")

  public Integer getSamplesTotal() {
    return samplesTotal;
  }


  public void setSamplesTotal(Integer samplesTotal) {
    this.samplesTotal = samplesTotal;
  }


  public StreamingEndpointUsageInfo samplesThisPeriod(Integer samplesThisPeriod) {
    
    this.samplesThisPeriod = samplesThisPeriod;
    return this;
  }

   /**
   * number of samples processed during the current billing period
   * @return samplesThisPeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "number of samples processed during the current billing period")

  public Integer getSamplesThisPeriod() {
    return samplesThisPeriod;
  }


  public void setSamplesThisPeriod(Integer samplesThisPeriod) {
    this.samplesThisPeriod = samplesThisPeriod;
  }


  public StreamingEndpointUsageInfo lastCalled(String lastCalled) {
    
    this.lastCalled = lastCalled;
    return this;
  }

   /**
   * ISO formatted time of last call to this endpoint
   * @return lastCalled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO formatted time of last call to this endpoint")

  public String getLastCalled() {
    return lastCalled;
  }


  public void setLastCalled(String lastCalled) {
    this.lastCalled = lastCalled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingEndpointUsageInfo streamingEndpointUsageInfo = (StreamingEndpointUsageInfo) o;
    return Objects.equals(this.callsTotal, streamingEndpointUsageInfo.callsTotal) &&
        Objects.equals(this.callsThisPeriod, streamingEndpointUsageInfo.callsThisPeriod) &&
        Objects.equals(this.samplesTotal, streamingEndpointUsageInfo.samplesTotal) &&
        Objects.equals(this.samplesThisPeriod, streamingEndpointUsageInfo.samplesThisPeriod) &&
        Objects.equals(this.lastCalled, streamingEndpointUsageInfo.lastCalled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callsTotal, callsThisPeriod, samplesTotal, samplesThisPeriod, lastCalled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingEndpointUsageInfo {\n");
    sb.append("    callsTotal: ").append(toIndentedString(callsTotal)).append("\n");
    sb.append("    callsThisPeriod: ").append(toIndentedString(callsThisPeriod)).append("\n");
    sb.append("    samplesTotal: ").append(toIndentedString(samplesTotal)).append("\n");
    sb.append("    samplesThisPeriod: ").append(toIndentedString(samplesThisPeriod)).append("\n");
    sb.append("    lastCalled: ").append(toIndentedString(lastCalled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callsTotal");
    openapiFields.add("callsThisPeriod");
    openapiFields.add("samplesTotal");
    openapiFields.add("samplesThisPeriod");
    openapiFields.add("lastCalled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callsTotal");
    openapiRequiredFields.add("callsThisPeriod");
    openapiRequiredFields.add("samplesTotal");
    openapiRequiredFields.add("samplesThisPeriod");
    openapiRequiredFields.add("lastCalled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StreamingEndpointUsageInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StreamingEndpointUsageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingEndpointUsageInfo is not found in the empty JSON string", StreamingEndpointUsageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StreamingEndpointUsageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingEndpointUsageInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamingEndpointUsageInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("lastCalled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCalled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCalled").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingEndpointUsageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingEndpointUsageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingEndpointUsageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingEndpointUsageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingEndpointUsageInfo>() {
           @Override
           public void write(JsonWriter out, StreamingEndpointUsageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingEndpointUsageInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamingEndpointUsageInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamingEndpointUsageInfo
  * @throws IOException if the JSON string is invalid with respect to StreamingEndpointUsageInfo
  */
  public static StreamingEndpointUsageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingEndpointUsageInfo.class);
  }

 /**
  * Convert an instance of StreamingEndpointUsageInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

