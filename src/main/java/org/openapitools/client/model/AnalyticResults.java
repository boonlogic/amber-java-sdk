/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyticResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T13:40:02.482575-06:00[America/Chicago]")
public class AnalyticResults {
  public static final String SERIALIZED_NAME_WARNING_LEVEL = "warningLevel";
  @SerializedName(SERIALIZED_NAME_WARNING_LEVEL)
  private List<Integer> warningLevel = null;

  public static final String SERIALIZED_NAME_RECENT_ANOMALIES = "recentAnomalies";
  @SerializedName(SERIALIZED_NAME_RECENT_ANOMALIES)
  private List<Integer> recentAnomalies = null;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTION = "anomalyDetection";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTION)
  private List<Integer> anomalyDetection = null;

  public static final String SERIALIZED_NAME_ANOMALY_INDEX = "anomalyIndex";
  @SerializedName(SERIALIZED_NAME_ANOMALY_INDEX)
  private List<Integer> anomalyIndex = null;

  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private List<Integer> clusterId = null;

  public AnalyticResults() {
  }

  public AnalyticResults warningLevel(List<Integer> warningLevel) {
    
    this.warningLevel = warningLevel;
    return this;
  }

  public AnalyticResults addWarningLevelItem(Integer warningLevelItem) {
    if (this.warningLevel == null) {
      this.warningLevel = new ArrayList<>();
    }
    this.warningLevel.add(warningLevelItem);
    return this;
  }

   /**
   * Amber warning level at each sample, a measure of the compliance of recent behavior compared to behavior observed during &#x60;Learning&#x60;. This value is derived from &#x60;recentAnomalies&#x60; and a statistical model of expectations about the usual frequency of anomalies. - &#x60;0&#x60;: OK - &#x60;1&#x60;: asset changing - &#x60;2&#x60;: asset critical
   * @return warningLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amber warning level at each sample, a measure of the compliance of recent behavior compared to behavior observed during `Learning`. This value is derived from `recentAnomalies` and a statistical model of expectations about the usual frequency of anomalies. - `0`: OK - `1`: asset changing - `2`: asset critical")

  public List<Integer> getWarningLevel() {
    return warningLevel;
  }


  public void setWarningLevel(List<Integer> warningLevel) {
    this.warningLevel = warningLevel;
  }


  public AnalyticResults recentAnomalies(List<Integer> recentAnomalies) {
    
    this.recentAnomalies = recentAnomalies;
    return this;
  }

  public AnalyticResults addRecentAnomaliesItem(Integer recentAnomaliesItem) {
    if (this.recentAnomalies == null) {
      this.recentAnomalies = new ArrayList<>();
    }
    this.recentAnomalies.add(recentAnomaliesItem);
    return this;
  }

   /**
   * The number of anomalous patterns in the last &#x60;historyWindow&#x60; samples. Specifically, this is a moving-window sum of the &#x60;anomalyDetection&#x60; array with window length &#x60;historyWindow&#x60;.
   * @return recentAnomalies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of anomalous patterns in the last `historyWindow` samples. Specifically, this is a moving-window sum of the `anomalyDetection` array with window length `historyWindow`.")

  public List<Integer> getRecentAnomalies() {
    return recentAnomalies;
  }


  public void setRecentAnomalies(List<Integer> recentAnomalies) {
    this.recentAnomalies = recentAnomalies;
  }


  public AnalyticResults anomalyDetection(List<Integer> anomalyDetection) {
    
    this.anomalyDetection = anomalyDetection;
    return this;
  }

  public AnalyticResults addAnomalyDetectionItem(Integer anomalyDetectionItem) {
    if (this.anomalyDetection == null) {
      this.anomalyDetection = new ArrayList<>();
    }
    this.anomalyDetection.add(anomalyDetectionItem);
    return this;
  }

   /**
   * A binary array where 1 means a pattern was anomalous and 0 means normal. This value is derived by thresholding the &#x60;anomalyIndex&#x60;.
   * @return anomalyDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A binary array where 1 means a pattern was anomalous and 0 means normal. This value is derived by thresholding the `anomalyIndex`.")

  public List<Integer> getAnomalyDetection() {
    return anomalyDetection;
  }


  public void setAnomalyDetection(List<Integer> anomalyDetection) {
    this.anomalyDetection = anomalyDetection;
  }


  public AnalyticResults anomalyIndex(List<Integer> anomalyIndex) {
    
    this.anomalyIndex = anomalyIndex;
    return this;
  }

  public AnalyticResults addAnomalyIndexItem(Integer anomalyIndexItem) {
    if (this.anomalyIndex == null) {
      this.anomalyIndex = new ArrayList<>();
    }
    this.anomalyIndex.add(anomalyIndexItem);
    return this;
  }

   /**
   * An integer between 0 and 1000 giving a measure of how anomalous this pattern is compared to patterns seen in the past. Values closer to 0 represent patterns which are ordinary given the data seen so far on this model, while values closer to 1000 represent anomalous patterns. Patterns with a high &#x60;anomalyIndex&#x60; belong to clusters with relatively few patterns compared to the other clusters.
   * @return anomalyIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An integer between 0 and 1000 giving a measure of how anomalous this pattern is compared to patterns seen in the past. Values closer to 0 represent patterns which are ordinary given the data seen so far on this model, while values closer to 1000 represent anomalous patterns. Patterns with a high `anomalyIndex` belong to clusters with relatively few patterns compared to the other clusters.")

  public List<Integer> getAnomalyIndex() {
    return anomalyIndex;
  }


  public void setAnomalyIndex(List<Integer> anomalyIndex) {
    this.anomalyIndex = anomalyIndex;
  }


  public AnalyticResults clusterId(List<Integer> clusterId) {
    
    this.clusterId = clusterId;
    return this;
  }

  public AnalyticResults addClusterIdItem(Integer clusterIdItem) {
    if (this.clusterId == null) {
      this.clusterId = new ArrayList<>();
    }
    this.clusterId.add(clusterIdItem);
    return this;
  }

   /**
   * The cluster to which each input pattern was assigned. The first pattern is assigned a &#x60;clusterId&#x60; of 1. Each pattern thereafter is either assigned to an existing cluster (if its distance from that cluster is less than &#x60;percentVariation&#x60;) or creates a new cluster (if its distance from all clusters exceeds &#x60;percentVariation&#x60;). The &#x60;clusterId&#x60; for each new cluster is the current maximum &#x60;clusterId&#x60; plus one. For example, a model with 10 clusters will have &#x60;clusterIds&#x60; 1-10, and the next new cluster will have &#x60;clusterId&#x60; 11.  During &#x60;Monitoring&#x60;, the cluster model becomes frozen and no new clusters are formed. Patterns which cannot be assigned to any existing cluster will return a negative &#x60;clusterId&#x60;. These &#x60;clusterIds&#x60; start at -1 and decreasing strictly by 1 without repeating (they can be used for blame analysis).
   * @return clusterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cluster to which each input pattern was assigned. The first pattern is assigned a `clusterId` of 1. Each pattern thereafter is either assigned to an existing cluster (if its distance from that cluster is less than `percentVariation`) or creates a new cluster (if its distance from all clusters exceeds `percentVariation`). The `clusterId` for each new cluster is the current maximum `clusterId` plus one. For example, a model with 10 clusters will have `clusterIds` 1-10, and the next new cluster will have `clusterId` 11.  During `Monitoring`, the cluster model becomes frozen and no new clusters are formed. Patterns which cannot be assigned to any existing cluster will return a negative `clusterId`. These `clusterIds` start at -1 and decreasing strictly by 1 without repeating (they can be used for blame analysis).")

  public List<Integer> getClusterId() {
    return clusterId;
  }


  public void setClusterId(List<Integer> clusterId) {
    this.clusterId = clusterId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticResults analyticResults = (AnalyticResults) o;
    return Objects.equals(this.warningLevel, analyticResults.warningLevel) &&
        Objects.equals(this.recentAnomalies, analyticResults.recentAnomalies) &&
        Objects.equals(this.anomalyDetection, analyticResults.anomalyDetection) &&
        Objects.equals(this.anomalyIndex, analyticResults.anomalyIndex) &&
        Objects.equals(this.clusterId, analyticResults.clusterId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warningLevel, recentAnomalies, anomalyDetection, anomalyIndex, clusterId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticResults {\n");
    sb.append("    warningLevel: ").append(toIndentedString(warningLevel)).append("\n");
    sb.append("    recentAnomalies: ").append(toIndentedString(recentAnomalies)).append("\n");
    sb.append("    anomalyDetection: ").append(toIndentedString(anomalyDetection)).append("\n");
    sb.append("    anomalyIndex: ").append(toIndentedString(anomalyIndex)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("warningLevel");
    openapiFields.add("recentAnomalies");
    openapiFields.add("anomalyDetection");
    openapiFields.add("anomalyIndex");
    openapiFields.add("clusterId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnalyticResults
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnalyticResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticResults is not found in the empty JSON string", AnalyticResults.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AnalyticResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyticResults` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warningLevel") != null && !jsonObj.get("warningLevel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warningLevel` to be an array in the JSON string but got `%s`", jsonObj.get("warningLevel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recentAnomalies") != null && !jsonObj.get("recentAnomalies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recentAnomalies` to be an array in the JSON string but got `%s`", jsonObj.get("recentAnomalies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anomalyDetection") != null && !jsonObj.get("anomalyDetection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anomalyDetection` to be an array in the JSON string but got `%s`", jsonObj.get("anomalyDetection").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anomalyIndex") != null && !jsonObj.get("anomalyIndex").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anomalyIndex` to be an array in the JSON string but got `%s`", jsonObj.get("anomalyIndex").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be an array in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticResults.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticResults>() {
           @Override
           public void write(JsonWriter out, AnalyticResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticResults read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalyticResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalyticResults
  * @throws IOException if the JSON string is invalid with respect to AnalyticResults
  */
  public static AnalyticResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticResults.class);
  }

 /**
  * Convert an instance of AnalyticResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

