/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostStreamResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T15:34:16.605003-06:00[America/Chicago]")
public class PostStreamResponse {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_CLUSTER_COUNT = "clusterCount";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COUNT)
  private Integer clusterCount;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_STREAMING_WINDOW_SIZE = "streamingWindowSize";
  @SerializedName(SERIALIZED_NAME_STREAMING_WINDOW_SIZE)
  private Integer streamingWindowSize;

  public static final String SERIALIZED_NAME_TOTAL_INFERENCES = "totalInferences";
  @SerializedName(SERIALIZED_NAME_TOTAL_INFERENCES)
  private Integer totalInferences;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private List<Integer> ID = new ArrayList<>();

  public static final String SERIALIZED_NAME_R_I = "RI";
  @SerializedName(SERIALIZED_NAME_R_I)
  private List<Integer> RI = new ArrayList<>();

  public static final String SERIALIZED_NAME_S_I = "SI";
  @SerializedName(SERIALIZED_NAME_S_I)
  private List<Integer> SI = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_D = "AD";
  @SerializedName(SERIALIZED_NAME_A_D)
  private List<Integer> AD = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_H = "AH";
  @SerializedName(SERIALIZED_NAME_A_H)
  private List<Integer> AH = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_M = "AM";
  @SerializedName(SERIALIZED_NAME_A_M)
  private List<Float> AM = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_W = "AW";
  @SerializedName(SERIALIZED_NAME_A_W)
  private List<Integer> AW = new ArrayList<>();

  public static final String SERIALIZED_NAME_N_I = "NI";
  @SerializedName(SERIALIZED_NAME_N_I)
  private List<Integer> NI = new ArrayList<>();

  public static final String SERIALIZED_NAME_N_S = "NS";
  @SerializedName(SERIALIZED_NAME_N_S)
  private List<Integer> NS = new ArrayList<>();

  public static final String SERIALIZED_NAME_N_W = "NW";
  @SerializedName(SERIALIZED_NAME_N_W)
  private List<Float> NW = new ArrayList<>();

  public static final String SERIALIZED_NAME_O_M = "OM";
  @SerializedName(SERIALIZED_NAME_O_M)
  private List<Float> OM = new ArrayList<>();

  public PostStreamResponse() {
  }

  public PostStreamResponse state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public PostStreamResponse message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * message to accompany the current state
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "message to accompany the current state")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public PostStreamResponse progress(Integer progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * completion percentage (applies to Buffering and Autotuning states)
   * @return progress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "completion percentage (applies to Buffering and Autotuning states)")

  public Integer getProgress() {
    return progress;
  }


  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public PostStreamResponse clusterCount(Integer clusterCount) {
    
    this.clusterCount = clusterCount;
    return this;
  }

   /**
   * current cluster count (applies to Learning and Monitoring states)
   * @return clusterCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "current cluster count (applies to Learning and Monitoring states)")

  public Integer getClusterCount() {
    return clusterCount;
  }


  public void setClusterCount(Integer clusterCount) {
    this.clusterCount = clusterCount;
  }


  public PostStreamResponse retryCount(Integer retryCount) {
    
    this.retryCount = retryCount;
    return this;
  }

   /**
   * number of restarts that have happened during autotuning
   * @return retryCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "number of restarts that have happened during autotuning")

  public Integer getRetryCount() {
    return retryCount;
  }


  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public PostStreamResponse streamingWindowSize(Integer streamingWindowSize) {
    
    this.streamingWindowSize = streamingWindowSize;
    return this;
  }

   /**
   * the current streaming window size that is being used
   * @return streamingWindowSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the current streaming window size that is being used")

  public Integer getStreamingWindowSize() {
    return streamingWindowSize;
  }


  public void setStreamingWindowSize(Integer streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
  }


  public PostStreamResponse totalInferences(Integer totalInferences) {
    
    this.totalInferences = totalInferences;
    return this;
  }

   /**
   * inferences since the most recent restart
   * @return totalInferences
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "inferences since the most recent restart")

  public Integer getTotalInferences() {
    return totalInferences;
  }


  public void setTotalInferences(Integer totalInferences) {
    this.totalInferences = totalInferences;
  }


  public PostStreamResponse ID(List<Integer> ID) {
    
    this.ID = ID;
    return this;
  }

  public PostStreamResponse addIDItem(Integer IDItem) {
    this.ID.add(IDItem);
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getID() {
    return ID;
  }


  public void setID(List<Integer> ID) {
    this.ID = ID;
  }


  public PostStreamResponse RI(List<Integer> RI) {
    
    this.RI = RI;
    return this;
  }

  public PostStreamResponse addRIItem(Integer RIItem) {
    this.RI.add(RIItem);
    return this;
  }

   /**
   * Get RI
   * @return RI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getRI() {
    return RI;
  }


  public void setRI(List<Integer> RI) {
    this.RI = RI;
  }


  public PostStreamResponse SI(List<Integer> SI) {
    
    this.SI = SI;
    return this;
  }

  public PostStreamResponse addSIItem(Integer SIItem) {
    this.SI.add(SIItem);
    return this;
  }

   /**
   * Get SI
   * @return SI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getSI() {
    return SI;
  }


  public void setSI(List<Integer> SI) {
    this.SI = SI;
  }


  public PostStreamResponse AD(List<Integer> AD) {
    
    this.AD = AD;
    return this;
  }

  public PostStreamResponse addADItem(Integer ADItem) {
    this.AD.add(ADItem);
    return this;
  }

   /**
   * Get AD
   * @return AD
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getAD() {
    return AD;
  }


  public void setAD(List<Integer> AD) {
    this.AD = AD;
  }


  public PostStreamResponse AH(List<Integer> AH) {
    
    this.AH = AH;
    return this;
  }

  public PostStreamResponse addAHItem(Integer AHItem) {
    this.AH.add(AHItem);
    return this;
  }

   /**
   * Get AH
   * @return AH
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getAH() {
    return AH;
  }


  public void setAH(List<Integer> AH) {
    this.AH = AH;
  }


  public PostStreamResponse AM(List<Float> AM) {
    
    this.AM = AM;
    return this;
  }

  public PostStreamResponse addAMItem(Float AMItem) {
    this.AM.add(AMItem);
    return this;
  }

   /**
   * Get AM
   * @return AM
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Float> getAM() {
    return AM;
  }


  public void setAM(List<Float> AM) {
    this.AM = AM;
  }


  public PostStreamResponse AW(List<Integer> AW) {
    
    this.AW = AW;
    return this;
  }

  public PostStreamResponse addAWItem(Integer AWItem) {
    this.AW.add(AWItem);
    return this;
  }

   /**
   * Get AW
   * @return AW
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getAW() {
    return AW;
  }


  public void setAW(List<Integer> AW) {
    this.AW = AW;
  }


  public PostStreamResponse NI(List<Integer> NI) {
    
    this.NI = NI;
    return this;
  }

  public PostStreamResponse addNIItem(Integer NIItem) {
    this.NI.add(NIItem);
    return this;
  }

   /**
   * Get NI
   * @return NI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getNI() {
    return NI;
  }


  public void setNI(List<Integer> NI) {
    this.NI = NI;
  }


  public PostStreamResponse NS(List<Integer> NS) {
    
    this.NS = NS;
    return this;
  }

  public PostStreamResponse addNSItem(Integer NSItem) {
    this.NS.add(NSItem);
    return this;
  }

   /**
   * Get NS
   * @return NS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getNS() {
    return NS;
  }


  public void setNS(List<Integer> NS) {
    this.NS = NS;
  }


  public PostStreamResponse NW(List<Float> NW) {
    
    this.NW = NW;
    return this;
  }

  public PostStreamResponse addNWItem(Float NWItem) {
    this.NW.add(NWItem);
    return this;
  }

   /**
   * Get NW
   * @return NW
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Float> getNW() {
    return NW;
  }


  public void setNW(List<Float> NW) {
    this.NW = NW;
  }


  public PostStreamResponse OM(List<Float> OM) {
    
    this.OM = OM;
    return this;
  }

  public PostStreamResponse addOMItem(Float OMItem) {
    this.OM.add(OMItem);
    return this;
  }

   /**
   * Get OM
   * @return OM
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Float> getOM() {
    return OM;
  }


  public void setOM(List<Float> OM) {
    this.OM = OM;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostStreamResponse postStreamResponse = (PostStreamResponse) o;
    return Objects.equals(this.state, postStreamResponse.state) &&
        Objects.equals(this.message, postStreamResponse.message) &&
        Objects.equals(this.progress, postStreamResponse.progress) &&
        Objects.equals(this.clusterCount, postStreamResponse.clusterCount) &&
        Objects.equals(this.retryCount, postStreamResponse.retryCount) &&
        Objects.equals(this.streamingWindowSize, postStreamResponse.streamingWindowSize) &&
        Objects.equals(this.totalInferences, postStreamResponse.totalInferences) &&
        Objects.equals(this.ID, postStreamResponse.ID) &&
        Objects.equals(this.RI, postStreamResponse.RI) &&
        Objects.equals(this.SI, postStreamResponse.SI) &&
        Objects.equals(this.AD, postStreamResponse.AD) &&
        Objects.equals(this.AH, postStreamResponse.AH) &&
        Objects.equals(this.AM, postStreamResponse.AM) &&
        Objects.equals(this.AW, postStreamResponse.AW) &&
        Objects.equals(this.NI, postStreamResponse.NI) &&
        Objects.equals(this.NS, postStreamResponse.NS) &&
        Objects.equals(this.NW, postStreamResponse.NW) &&
        Objects.equals(this.OM, postStreamResponse.OM);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, message, progress, clusterCount, retryCount, streamingWindowSize, totalInferences, ID, RI, SI, AD, AH, AM, AW, NI, NS, NW, OM);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostStreamResponse {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    streamingWindowSize: ").append(toIndentedString(streamingWindowSize)).append("\n");
    sb.append("    totalInferences: ").append(toIndentedString(totalInferences)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    RI: ").append(toIndentedString(RI)).append("\n");
    sb.append("    SI: ").append(toIndentedString(SI)).append("\n");
    sb.append("    AD: ").append(toIndentedString(AD)).append("\n");
    sb.append("    AH: ").append(toIndentedString(AH)).append("\n");
    sb.append("    AM: ").append(toIndentedString(AM)).append("\n");
    sb.append("    AW: ").append(toIndentedString(AW)).append("\n");
    sb.append("    NI: ").append(toIndentedString(NI)).append("\n");
    sb.append("    NS: ").append(toIndentedString(NS)).append("\n");
    sb.append("    NW: ").append(toIndentedString(NW)).append("\n");
    sb.append("    OM: ").append(toIndentedString(OM)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("message");
    openapiFields.add("progress");
    openapiFields.add("clusterCount");
    openapiFields.add("retryCount");
    openapiFields.add("streamingWindowSize");
    openapiFields.add("totalInferences");
    openapiFields.add("ID");
    openapiFields.add("RI");
    openapiFields.add("SI");
    openapiFields.add("AD");
    openapiFields.add("AH");
    openapiFields.add("AM");
    openapiFields.add("AW");
    openapiFields.add("NI");
    openapiFields.add("NS");
    openapiFields.add("NW");
    openapiFields.add("OM");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("progress");
    openapiRequiredFields.add("clusterCount");
    openapiRequiredFields.add("retryCount");
    openapiRequiredFields.add("streamingWindowSize");
    openapiRequiredFields.add("totalInferences");
    openapiRequiredFields.add("ID");
    openapiRequiredFields.add("RI");
    openapiRequiredFields.add("SI");
    openapiRequiredFields.add("AD");
    openapiRequiredFields.add("AH");
    openapiRequiredFields.add("AM");
    openapiRequiredFields.add("AW");
    openapiRequiredFields.add("NI");
    openapiRequiredFields.add("NS");
    openapiRequiredFields.add("NW");
    openapiRequiredFields.add("OM");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostStreamResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostStreamResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostStreamResponse is not found in the empty JSON string", PostStreamResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostStreamResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostStreamResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostStreamResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be an array in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("RI") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("RI").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RI` to be an array in the JSON string but got `%s`", jsonObj.get("RI").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("SI") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("SI").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SI` to be an array in the JSON string but got `%s`", jsonObj.get("SI").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("AD") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("AD").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AD` to be an array in the JSON string but got `%s`", jsonObj.get("AD").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("AH") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("AH").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AH` to be an array in the JSON string but got `%s`", jsonObj.get("AH").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("AM") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("AM").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AM` to be an array in the JSON string but got `%s`", jsonObj.get("AM").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("AW") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("AW").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AW` to be an array in the JSON string but got `%s`", jsonObj.get("AW").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("NI") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("NI").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NI` to be an array in the JSON string but got `%s`", jsonObj.get("NI").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("NS") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("NS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NS` to be an array in the JSON string but got `%s`", jsonObj.get("NS").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("NW") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("NW").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NW` to be an array in the JSON string but got `%s`", jsonObj.get("NW").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("OM") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("OM").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OM` to be an array in the JSON string but got `%s`", jsonObj.get("OM").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostStreamResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostStreamResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostStreamResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostStreamResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PostStreamResponse>() {
           @Override
           public void write(JsonWriter out, PostStreamResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostStreamResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostStreamResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostStreamResponse
  * @throws IOException if the JSON string is invalid with respect to PostStreamResponse
  */
  public static PostStreamResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostStreamResponse.class);
  }

 /**
  * Convert an instance of PostStreamResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

