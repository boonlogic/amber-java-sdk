/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.EndpointUsageInfo;
import org.openapitools.client.model.StreamingEndpointUsageInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SensorUsageInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T09:54:04.469994-06:00[America/Chicago]")
public class SensorUsageInfo {
  public static final String SERIALIZED_NAME_POST_CONFIG = "postConfig";
  @SerializedName(SERIALIZED_NAME_POST_CONFIG)
  private EndpointUsageInfo postConfig;

  public static final String SERIALIZED_NAME_POST_OUTAGE = "postOutage";
  @SerializedName(SERIALIZED_NAME_POST_OUTAGE)
  private EndpointUsageInfo postOutage;

  public static final String SERIALIZED_NAME_POST_STREAM = "postStream";
  @SerializedName(SERIALIZED_NAME_POST_STREAM)
  private StreamingEndpointUsageInfo postStream;

  public static final String SERIALIZED_NAME_PUT_SENSOR = "putSensor";
  @SerializedName(SERIALIZED_NAME_PUT_SENSOR)
  private EndpointUsageInfo putSensor;

  public static final String SERIALIZED_NAME_GET_SENSOR = "getSensor";
  @SerializedName(SERIALIZED_NAME_GET_SENSOR)
  private EndpointUsageInfo getSensor;

  public static final String SERIALIZED_NAME_GET_CONFIG = "getConfig";
  @SerializedName(SERIALIZED_NAME_GET_CONFIG)
  private EndpointUsageInfo getConfig;

  public static final String SERIALIZED_NAME_GET_STATUS = "getStatus";
  @SerializedName(SERIALIZED_NAME_GET_STATUS)
  private EndpointUsageInfo getStatus;

  public static final String SERIALIZED_NAME_GET_ROOT_CAUSE = "getRootCause";
  @SerializedName(SERIALIZED_NAME_GET_ROOT_CAUSE)
  private EndpointUsageInfo getRootCause;

  public static final String SERIALIZED_NAME_GET_AMBER_SUMMARY = "getAmberSummary";
  @SerializedName(SERIALIZED_NAME_GET_AMBER_SUMMARY)
  private EndpointUsageInfo getAmberSummary;

  public static final String SERIALIZED_NAME_POST_PRETRAIN = "postPretrain";
  @SerializedName(SERIALIZED_NAME_POST_PRETRAIN)
  private EndpointUsageInfo postPretrain;

  public static final String SERIALIZED_NAME_GET_PRETRAIN = "getPretrain";
  @SerializedName(SERIALIZED_NAME_GET_PRETRAIN)
  private EndpointUsageInfo getPretrain;

  public SensorUsageInfo() {
  }

  public SensorUsageInfo postConfig(EndpointUsageInfo postConfig) {
    
    this.postConfig = postConfig;
    return this;
  }

   /**
   * Get postConfig
   * @return postConfig
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getPostConfig() {
    return postConfig;
  }


  public void setPostConfig(EndpointUsageInfo postConfig) {
    this.postConfig = postConfig;
  }


  public SensorUsageInfo postOutage(EndpointUsageInfo postOutage) {
    
    this.postOutage = postOutage;
    return this;
  }

   /**
   * Get postOutage
   * @return postOutage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getPostOutage() {
    return postOutage;
  }


  public void setPostOutage(EndpointUsageInfo postOutage) {
    this.postOutage = postOutage;
  }


  public SensorUsageInfo postStream(StreamingEndpointUsageInfo postStream) {
    
    this.postStream = postStream;
    return this;
  }

   /**
   * Get postStream
   * @return postStream
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StreamingEndpointUsageInfo getPostStream() {
    return postStream;
  }


  public void setPostStream(StreamingEndpointUsageInfo postStream) {
    this.postStream = postStream;
  }


  public SensorUsageInfo putSensor(EndpointUsageInfo putSensor) {
    
    this.putSensor = putSensor;
    return this;
  }

   /**
   * Get putSensor
   * @return putSensor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getPutSensor() {
    return putSensor;
  }


  public void setPutSensor(EndpointUsageInfo putSensor) {
    this.putSensor = putSensor;
  }


  public SensorUsageInfo getSensor(EndpointUsageInfo getSensor) {
    
    this.getSensor = getSensor;
    return this;
  }

   /**
   * Get getSensor
   * @return getSensor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetSensor() {
    return getSensor;
  }


  public void setGetSensor(EndpointUsageInfo getSensor) {
    this.getSensor = getSensor;
  }


  public SensorUsageInfo getConfig(EndpointUsageInfo getConfig) {
    
    this.getConfig = getConfig;
    return this;
  }

   /**
   * Get getConfig
   * @return getConfig
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetConfig() {
    return getConfig;
  }


  public void setGetConfig(EndpointUsageInfo getConfig) {
    this.getConfig = getConfig;
  }


  public SensorUsageInfo getStatus(EndpointUsageInfo getStatus) {
    
    this.getStatus = getStatus;
    return this;
  }

   /**
   * Get getStatus
   * @return getStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetStatus() {
    return getStatus;
  }


  public void setGetStatus(EndpointUsageInfo getStatus) {
    this.getStatus = getStatus;
  }


  public SensorUsageInfo getRootCause(EndpointUsageInfo getRootCause) {
    
    this.getRootCause = getRootCause;
    return this;
  }

   /**
   * Get getRootCause
   * @return getRootCause
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetRootCause() {
    return getRootCause;
  }


  public void setGetRootCause(EndpointUsageInfo getRootCause) {
    this.getRootCause = getRootCause;
  }


  public SensorUsageInfo getAmberSummary(EndpointUsageInfo getAmberSummary) {
    
    this.getAmberSummary = getAmberSummary;
    return this;
  }

   /**
   * Get getAmberSummary
   * @return getAmberSummary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetAmberSummary() {
    return getAmberSummary;
  }


  public void setGetAmberSummary(EndpointUsageInfo getAmberSummary) {
    this.getAmberSummary = getAmberSummary;
  }


  public SensorUsageInfo postPretrain(EndpointUsageInfo postPretrain) {
    
    this.postPretrain = postPretrain;
    return this;
  }

   /**
   * Get postPretrain
   * @return postPretrain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getPostPretrain() {
    return postPretrain;
  }


  public void setPostPretrain(EndpointUsageInfo postPretrain) {
    this.postPretrain = postPretrain;
  }


  public SensorUsageInfo getPretrain(EndpointUsageInfo getPretrain) {
    
    this.getPretrain = getPretrain;
    return this;
  }

   /**
   * Get getPretrain
   * @return getPretrain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EndpointUsageInfo getGetPretrain() {
    return getPretrain;
  }


  public void setGetPretrain(EndpointUsageInfo getPretrain) {
    this.getPretrain = getPretrain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorUsageInfo sensorUsageInfo = (SensorUsageInfo) o;
    return Objects.equals(this.postConfig, sensorUsageInfo.postConfig) &&
        Objects.equals(this.postOutage, sensorUsageInfo.postOutage) &&
        Objects.equals(this.postStream, sensorUsageInfo.postStream) &&
        Objects.equals(this.putSensor, sensorUsageInfo.putSensor) &&
        Objects.equals(this.getSensor, sensorUsageInfo.getSensor) &&
        Objects.equals(this.getConfig, sensorUsageInfo.getConfig) &&
        Objects.equals(this.getStatus, sensorUsageInfo.getStatus) &&
        Objects.equals(this.getRootCause, sensorUsageInfo.getRootCause) &&
        Objects.equals(this.getAmberSummary, sensorUsageInfo.getAmberSummary) &&
        Objects.equals(this.postPretrain, sensorUsageInfo.postPretrain) &&
        Objects.equals(this.getPretrain, sensorUsageInfo.getPretrain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postConfig, postOutage, postStream, putSensor, getSensor, getConfig, getStatus, getRootCause, getAmberSummary, postPretrain, getPretrain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorUsageInfo {\n");
    sb.append("    postConfig: ").append(toIndentedString(postConfig)).append("\n");
    sb.append("    postOutage: ").append(toIndentedString(postOutage)).append("\n");
    sb.append("    postStream: ").append(toIndentedString(postStream)).append("\n");
    sb.append("    putSensor: ").append(toIndentedString(putSensor)).append("\n");
    sb.append("    getSensor: ").append(toIndentedString(getSensor)).append("\n");
    sb.append("    getConfig: ").append(toIndentedString(getConfig)).append("\n");
    sb.append("    getStatus: ").append(toIndentedString(getStatus)).append("\n");
    sb.append("    getRootCause: ").append(toIndentedString(getRootCause)).append("\n");
    sb.append("    getAmberSummary: ").append(toIndentedString(getAmberSummary)).append("\n");
    sb.append("    postPretrain: ").append(toIndentedString(postPretrain)).append("\n");
    sb.append("    getPretrain: ").append(toIndentedString(getPretrain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postConfig");
    openapiFields.add("postOutage");
    openapiFields.add("postStream");
    openapiFields.add("putSensor");
    openapiFields.add("getSensor");
    openapiFields.add("getConfig");
    openapiFields.add("getStatus");
    openapiFields.add("getRootCause");
    openapiFields.add("getAmberSummary");
    openapiFields.add("postPretrain");
    openapiFields.add("getPretrain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("postConfig");
    openapiRequiredFields.add("postOutage");
    openapiRequiredFields.add("postStream");
    openapiRequiredFields.add("putSensor");
    openapiRequiredFields.add("getSensor");
    openapiRequiredFields.add("getConfig");
    openapiRequiredFields.add("getStatus");
    openapiRequiredFields.add("getRootCause");
    openapiRequiredFields.add("getAmberSummary");
    openapiRequiredFields.add("postPretrain");
    openapiRequiredFields.add("getPretrain");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SensorUsageInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SensorUsageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SensorUsageInfo is not found in the empty JSON string", SensorUsageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SensorUsageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SensorUsageInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SensorUsageInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `postConfig`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("postConfig"));
      // validate the required field `postOutage`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("postOutage"));
      // validate the required field `postStream`
      StreamingEndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("postStream"));
      // validate the required field `putSensor`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("putSensor"));
      // validate the required field `getSensor`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getSensor"));
      // validate the required field `getConfig`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getConfig"));
      // validate the required field `getStatus`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getStatus"));
      // validate the required field `getRootCause`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getRootCause"));
      // validate the required field `getAmberSummary`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getAmberSummary"));
      // validate the required field `postPretrain`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("postPretrain"));
      // validate the required field `getPretrain`
      EndpointUsageInfo.validateJsonObject(jsonObj.getAsJsonObject("getPretrain"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SensorUsageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SensorUsageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SensorUsageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SensorUsageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SensorUsageInfo>() {
           @Override
           public void write(JsonWriter out, SensorUsageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SensorUsageInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SensorUsageInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SensorUsageInfo
  * @throws IOException if the JSON string is invalid with respect to SensorUsageInfo
  */
  public static SensorUsageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SensorUsageInfo.class);
  }

 /**
  * Convert an instance of SensorUsageInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

