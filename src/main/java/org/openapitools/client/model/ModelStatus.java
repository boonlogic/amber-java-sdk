/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.AmberState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T15:06:47.098836-06:00[America/Chicago]")
public class ModelStatus {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AmberState state;

  public static final String SERIALIZED_NAME_WARNING_LEVEL = "warningLevel";
  @SerializedName(SERIALIZED_NAME_WARNING_LEVEL)
  private Integer warningLevel;

  public static final String SERIALIZED_NAME_SAMPLE_COUNT = "sampleCount";
  @SerializedName(SERIALIZED_NAME_SAMPLE_COUNT)
  private Integer sampleCount;

  public static final String SERIALIZED_NAME_CLUSTER_COUNT = "clusterCount";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COUNT)
  private Integer clusterCount;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public ModelStatus() {
  }

  public ModelStatus state(AmberState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AmberState getState() {
    return state;
  }


  public void setState(AmberState state) {
    this.state = state;
  }


  public ModelStatus warningLevel(Integer warningLevel) {
    
    this.warningLevel = warningLevel;
    return this;
  }

   /**
   * Current Amber warning level, a measure of the compliance of recent behavior compared to behavior observed &#x60;Learning&#x60;.  - &#x60;0&#x60;: OK - &#x60;1&#x60;: asset changing - &#x60;2&#x60;: asset critical
   * @return warningLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current Amber warning level, a measure of the compliance of recent behavior compared to behavior observed `Learning`.  - `0`: OK - `1`: asset changing - `2`: asset critical")

  public Integer getWarningLevel() {
    return warningLevel;
  }


  public void setWarningLevel(Integer warningLevel) {
    this.warningLevel = warningLevel;
  }


  public ModelStatus sampleCount(Integer sampleCount) {
    
    this.sampleCount = sampleCount;
    return this;
  }

   /**
   * Total number of patterns processed since configuration.
   * @return sampleCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of patterns processed since configuration.")

  public Integer getSampleCount() {
    return sampleCount;
  }


  public void setSampleCount(Integer sampleCount) {
    this.sampleCount = sampleCount;
  }


  public ModelStatus clusterCount(Integer clusterCount) {
    
    this.clusterCount = clusterCount;
    return this;
  }

   /**
   * Total number of clusters generated by patterns so far.
   * @return clusterCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of clusters generated by patterns so far.")

  public Integer getClusterCount() {
    return clusterCount;
  }


  public void setClusterCount(Integer clusterCount) {
    this.clusterCount = clusterCount;
  }


  public ModelStatus progress(Integer progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * During &#x60;Buffering&#x60;, &#x60;Learning&#x60; and &#x60;Autotuning&#x60;: estimated progress through the current state as an integer percentage.  During &#x60;Monitoring&#x60;: this field does not apply.
   * minimum: 0
   * maximum: 100
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "During `Buffering`, `Learning` and `Autotuning`: estimated progress through the current state as an integer percentage.  During `Monitoring`: this field does not apply.")

  public Integer getProgress() {
    return progress;
  }


  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public ModelStatus message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Status description.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status description.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelStatus modelStatus = (ModelStatus) o;
    return Objects.equals(this.state, modelStatus.state) &&
        Objects.equals(this.warningLevel, modelStatus.warningLevel) &&
        Objects.equals(this.sampleCount, modelStatus.sampleCount) &&
        Objects.equals(this.clusterCount, modelStatus.clusterCount) &&
        Objects.equals(this.progress, modelStatus.progress) &&
        Objects.equals(this.message, modelStatus.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, warningLevel, sampleCount, clusterCount, progress, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelStatus {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    warningLevel: ").append(toIndentedString(warningLevel)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("warningLevel");
    openapiFields.add("sampleCount");
    openapiFields.add("clusterCount");
    openapiFields.add("progress");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelStatus is not found in the empty JSON string", ModelStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelStatus>() {
           @Override
           public void write(JsonWriter out, ModelStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelStatus
  * @throws IOException if the JSON string is invalid with respect to ModelStatus
  */
  public static ModelStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelStatus.class);
  }

 /**
  * Convert an instance of ModelStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

