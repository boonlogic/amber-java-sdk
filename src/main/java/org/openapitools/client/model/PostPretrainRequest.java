/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPretrainRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T15:06:47.098836-06:00[America/Chicago]")
public class PostPretrainRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  /**
   * Format specifier for &#x60;data&#x60;.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("csv"),
    
    B64FLOAT("b64float");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.CSV;

  /**
   * One of: &#x60;Autotuning&#x60;, &#x60;Learning&#x60;, &#x60;Monitoring&#x60;. If set, the &#x60;training&#x60; configuration parameters will be ignored and set automatically based on the dataset length such that the model emerges from pretraining at the start of the specified state.
   */
  @JsonAdapter(TargetStateEnum.Adapter.class)
  public enum TargetStateEnum {
    AUTOTUNING("Autotuning"),
    
    LEARNING("Learning"),
    
    MONITORING("Monitoring");

    private String value;

    TargetStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetStateEnum fromValue(String value) {
      for (TargetStateEnum b : TargetStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET_STATE = "targetState";
  @SerializedName(SERIALIZED_NAME_TARGET_STATE)
  private TargetStateEnum targetState;

  public PostPretrainRequest() {
  }

  public PostPretrainRequest data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Data in one of two formats: 1) A flat list of comma-separated values. 2) The string that results from flattening the dataset, packing the values into a byte buffer as float32s (little-endian), and base-64 encoding the buffer.  Datasets which are too large to send in one request may be sent in multiple chunks using the header parameters for chunked uploads (&#x60;token&#x60; and &#x60;chunkspec&#x60;).  The total number of data values sent for pretraining must be a multiple of the number of features in the configuration.
   * @return data
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Data in one of two formats: 1) A flat list of comma-separated values. 2) The string that results from flattening the dataset, packing the values into a byte buffer as float32s (little-endian), and base-64 encoding the buffer.  Datasets which are too large to send in one request may be sent in multiple chunks using the header parameters for chunked uploads (`token` and `chunkspec`).  The total number of data values sent for pretraining must be a multiple of the number of features in the configuration.")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public PostPretrainRequest format(FormatEnum format) {
    
    this.format = format;
    return this;
  }

   /**
   * Format specifier for &#x60;data&#x60;.
   * @return format
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Format specifier for `data`.")

  public FormatEnum getFormat() {
    return format;
  }


  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public PostPretrainRequest targetState(TargetStateEnum targetState) {
    
    this.targetState = targetState;
    return this;
  }

   /**
   * One of: &#x60;Autotuning&#x60;, &#x60;Learning&#x60;, &#x60;Monitoring&#x60;. If set, the &#x60;training&#x60; configuration parameters will be ignored and set automatically based on the dataset length such that the model emerges from pretraining at the start of the specified state.
   * @return targetState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One of: `Autotuning`, `Learning`, `Monitoring`. If set, the `training` configuration parameters will be ignored and set automatically based on the dataset length such that the model emerges from pretraining at the start of the specified state.")

  public TargetStateEnum getTargetState() {
    return targetState;
  }


  public void setTargetState(TargetStateEnum targetState) {
    this.targetState = targetState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPretrainRequest postPretrainRequest = (PostPretrainRequest) o;
    return Objects.equals(this.data, postPretrainRequest.data) &&
        Objects.equals(this.format, postPretrainRequest.format) &&
        Objects.equals(this.targetState, postPretrainRequest.targetState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, format, targetState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPretrainRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    targetState: ").append(toIndentedString(targetState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("format");
    openapiFields.add("targetState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostPretrainRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostPretrainRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPretrainRequest is not found in the empty JSON string", PostPretrainRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostPretrainRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPretrainRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPretrainRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("targetState") != null && !jsonObj.get("targetState").isJsonNull()) && !jsonObj.get("targetState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPretrainRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPretrainRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPretrainRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPretrainRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPretrainRequest>() {
           @Override
           public void write(JsonWriter out, PostPretrainRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPretrainRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostPretrainRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostPretrainRequest
  * @throws IOException if the JSON string is invalid with respect to PostPretrainRequest
  */
  public static PostPretrainRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPretrainRequest.class);
  }

 /**
  * Convert an instance of PostPretrainRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

