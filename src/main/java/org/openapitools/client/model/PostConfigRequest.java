/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.FeatureConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T09:54:04.469994-06:00[America/Chicago]")
public class PostConfigRequest {
  public static final String SERIALIZED_NAME_ANOMALY_HISTORY_WINDOW = "anomalyHistoryWindow";
  @SerializedName(SERIALIZED_NAME_ANOMALY_HISTORY_WINDOW)
  private Integer anomalyHistoryWindow;

  public static final String SERIALIZED_NAME_LEARNING_RATE_NUMERATOR = "learningRateNumerator";
  @SerializedName(SERIALIZED_NAME_LEARNING_RATE_NUMERATOR)
  private Integer learningRateNumerator;

  public static final String SERIALIZED_NAME_LEARNING_RATE_DENOMINATOR = "learningRateDenominator";
  @SerializedName(SERIALIZED_NAME_LEARNING_RATE_DENOMINATOR)
  private Integer learningRateDenominator;

  public static final String SERIALIZED_NAME_LEARNING_MAX_CLUSTERS = "learningMaxClusters";
  @SerializedName(SERIALIZED_NAME_LEARNING_MAX_CLUSTERS)
  private Integer learningMaxClusters;

  public static final String SERIALIZED_NAME_LEARNING_MAX_SAMPLES = "learningMaxSamples";
  @SerializedName(SERIALIZED_NAME_LEARNING_MAX_SAMPLES)
  private Integer learningMaxSamples;

  public static final String SERIALIZED_NAME_FEATURE_COUNT = "featureCount";
  @SerializedName(SERIALIZED_NAME_FEATURE_COUNT)
  private Integer featureCount;

  public static final String SERIALIZED_NAME_STREAMING_WINDOW_SIZE = "streamingWindowSize";
  @SerializedName(SERIALIZED_NAME_STREAMING_WINDOW_SIZE)
  private Integer streamingWindowSize;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<FeatureConfig> features = null;

  public static final String SERIALIZED_NAME_SAMPLES_TO_BUFFER = "samplesToBuffer";
  @SerializedName(SERIALIZED_NAME_SAMPLES_TO_BUFFER)
  private Integer samplesToBuffer;

  public static final String SERIALIZED_NAME_PERCENT_VARIATION_OVERRIDE = "percentVariationOverride";
  @SerializedName(SERIALIZED_NAME_PERCENT_VARIATION_OVERRIDE)
  private Float percentVariationOverride = -1.0f;

  public PostConfigRequest() {
  }

  public PostConfigRequest anomalyHistoryWindow(Integer anomalyHistoryWindow) {
    
    this.anomalyHistoryWindow = anomalyHistoryWindow;
    return this;
  }

   /**
   * the number of samples to use when calculating AH
   * @return anomalyHistoryWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the number of samples to use when calculating AH")

  public Integer getAnomalyHistoryWindow() {
    return anomalyHistoryWindow;
  }


  public void setAnomalyHistoryWindow(Integer anomalyHistoryWindow) {
    this.anomalyHistoryWindow = anomalyHistoryWindow;
  }


  public PostConfigRequest learningRateNumerator(Integer learningRateNumerator) {
    
    this.learningRateNumerator = learningRateNumerator;
    return this;
  }

   /**
   * enables graduation requirements for learning
   * @return learningRateNumerator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enables graduation requirements for learning")

  public Integer getLearningRateNumerator() {
    return learningRateNumerator;
  }


  public void setLearningRateNumerator(Integer learningRateNumerator) {
    this.learningRateNumerator = learningRateNumerator;
  }


  public PostConfigRequest learningRateDenominator(Integer learningRateDenominator) {
    
    this.learningRateDenominator = learningRateDenominator;
    return this;
  }

   /**
   * enables graduation requirements for learning
   * @return learningRateDenominator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enables graduation requirements for learning")

  public Integer getLearningRateDenominator() {
    return learningRateDenominator;
  }


  public void setLearningRateDenominator(Integer learningRateDenominator) {
    this.learningRateDenominator = learningRateDenominator;
  }


  public PostConfigRequest learningMaxClusters(Integer learningMaxClusters) {
    
    this.learningMaxClusters = learningMaxClusters;
    return this;
  }

   /**
   * learning graduation requirement for stopping learning upon reaching this cluster count
   * @return learningMaxClusters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "learning graduation requirement for stopping learning upon reaching this cluster count")

  public Integer getLearningMaxClusters() {
    return learningMaxClusters;
  }


  public void setLearningMaxClusters(Integer learningMaxClusters) {
    this.learningMaxClusters = learningMaxClusters;
  }


  public PostConfigRequest learningMaxSamples(Integer learningMaxSamples) {
    
    this.learningMaxSamples = learningMaxSamples;
    return this;
  }

   /**
   * learning graduation requirement for stopping learning after acquiring this many samples
   * @return learningMaxSamples
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "learning graduation requirement for stopping learning after acquiring this many samples")

  public Integer getLearningMaxSamples() {
    return learningMaxSamples;
  }


  public void setLearningMaxSamples(Integer learningMaxSamples) {
    this.learningMaxSamples = learningMaxSamples;
  }


  public PostConfigRequest featureCount(Integer featureCount) {
    
    this.featureCount = featureCount;
    return this;
  }

   /**
   * number of features per sample
   * minimum: 1
   * @return featureCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "number of features per sample")

  public Integer getFeatureCount() {
    return featureCount;
  }


  public void setFeatureCount(Integer featureCount) {
    this.featureCount = featureCount;
  }


  public PostConfigRequest streamingWindowSize(Integer streamingWindowSize) {
    
    this.streamingWindowSize = streamingWindowSize;
    return this;
  }

   /**
   * streaming window size
   * maximum: 500
   * @return streamingWindowSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "streaming window size")

  public Integer getStreamingWindowSize() {
    return streamingWindowSize;
  }


  public void setStreamingWindowSize(Integer streamingWindowSize) {
    this.streamingWindowSize = streamingWindowSize;
  }


  public PostConfigRequest features(List<FeatureConfig> features) {
    
    this.features = features;
    return this;
  }

  public PostConfigRequest addFeaturesItem(FeatureConfig featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FeatureConfig> getFeatures() {
    return features;
  }


  public void setFeatures(List<FeatureConfig> features) {
    this.features = features;
  }


  public PostConfigRequest samplesToBuffer(Integer samplesToBuffer) {
    
    this.samplesToBuffer = samplesToBuffer;
    return this;
  }

   /**
   * the number of samples to be applied before autotuning begins
   * @return samplesToBuffer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the number of samples to be applied before autotuning begins")

  public Integer getSamplesToBuffer() {
    return samplesToBuffer;
  }


  public void setSamplesToBuffer(Integer samplesToBuffer) {
    this.samplesToBuffer = samplesToBuffer;
  }


  public PostConfigRequest percentVariationOverride(Float percentVariationOverride) {
    
    this.percentVariationOverride = percentVariationOverride;
    return this;
  }

   /**
   * override autotuned percent variation with this value
   * @return percentVariationOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "override autotuned percent variation with this value")

  public Float getPercentVariationOverride() {
    return percentVariationOverride;
  }


  public void setPercentVariationOverride(Float percentVariationOverride) {
    this.percentVariationOverride = percentVariationOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostConfigRequest postConfigRequest = (PostConfigRequest) o;
    return Objects.equals(this.anomalyHistoryWindow, postConfigRequest.anomalyHistoryWindow) &&
        Objects.equals(this.learningRateNumerator, postConfigRequest.learningRateNumerator) &&
        Objects.equals(this.learningRateDenominator, postConfigRequest.learningRateDenominator) &&
        Objects.equals(this.learningMaxClusters, postConfigRequest.learningMaxClusters) &&
        Objects.equals(this.learningMaxSamples, postConfigRequest.learningMaxSamples) &&
        Objects.equals(this.featureCount, postConfigRequest.featureCount) &&
        Objects.equals(this.streamingWindowSize, postConfigRequest.streamingWindowSize) &&
        Objects.equals(this.features, postConfigRequest.features) &&
        Objects.equals(this.samplesToBuffer, postConfigRequest.samplesToBuffer) &&
        Objects.equals(this.percentVariationOverride, postConfigRequest.percentVariationOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyHistoryWindow, learningRateNumerator, learningRateDenominator, learningMaxClusters, learningMaxSamples, featureCount, streamingWindowSize, features, samplesToBuffer, percentVariationOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostConfigRequest {\n");
    sb.append("    anomalyHistoryWindow: ").append(toIndentedString(anomalyHistoryWindow)).append("\n");
    sb.append("    learningRateNumerator: ").append(toIndentedString(learningRateNumerator)).append("\n");
    sb.append("    learningRateDenominator: ").append(toIndentedString(learningRateDenominator)).append("\n");
    sb.append("    learningMaxClusters: ").append(toIndentedString(learningMaxClusters)).append("\n");
    sb.append("    learningMaxSamples: ").append(toIndentedString(learningMaxSamples)).append("\n");
    sb.append("    featureCount: ").append(toIndentedString(featureCount)).append("\n");
    sb.append("    streamingWindowSize: ").append(toIndentedString(streamingWindowSize)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    samplesToBuffer: ").append(toIndentedString(samplesToBuffer)).append("\n");
    sb.append("    percentVariationOverride: ").append(toIndentedString(percentVariationOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anomalyHistoryWindow");
    openapiFields.add("learningRateNumerator");
    openapiFields.add("learningRateDenominator");
    openapiFields.add("learningMaxClusters");
    openapiFields.add("learningMaxSamples");
    openapiFields.add("featureCount");
    openapiFields.add("streamingWindowSize");
    openapiFields.add("features");
    openapiFields.add("samplesToBuffer");
    openapiFields.add("percentVariationOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("featureCount");
    openapiRequiredFields.add("streamingWindowSize");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostConfigRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostConfigRequest is not found in the empty JSON string", PostConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostConfigRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostConfigRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            FeatureConfig.validateJsonObject(jsonArrayfeatures.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostConfigRequest>() {
           @Override
           public void write(JsonWriter out, PostConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostConfigRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostConfigRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostConfigRequest
  * @throws IOException if the JSON string is invalid with respect to PostConfigRequest
  */
  public static PostConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostConfigRequest.class);
  }

 /**
  * Convert an instance of PostConfigRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

