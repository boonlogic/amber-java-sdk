/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import java.io.File;
import java.io.FileReader;
import java.lang.reflect.Type;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Pair;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetConfigResponse;
import org.openapitools.client.model.GetPretrainResponse;
import org.openapitools.client.model.GetSensorResponse;
import org.openapitools.client.model.GetStatusResponse;
import org.openapitools.client.model.GetSummaryResponse;
import org.openapitools.client.model.PostAuth2Request;
import org.openapitools.client.model.PostAuth2Response;
import org.openapitools.client.model.PostConfigRequest;
import org.openapitools.client.model.PostConfigResponse;
import org.openapitools.client.model.PostOutageResponse;
import org.openapitools.client.model.PostPretrainRequest;
import org.openapitools.client.model.PostPretrainResponse;
import org.openapitools.client.model.PostSensorRequest;
import org.openapitools.client.model.PostSensorResponse;
import org.openapitools.client.model.PostStreamRequest;
import org.openapitools.client.model.PostStreamResponse;
import org.openapitools.client.model.PutConfigRequest;
import org.openapitools.client.model.PutConfigResponse;
import org.openapitools.client.model.PutSensorRequest;
import org.openapitools.client.model.PutSensorResponse;
import org.openapitools.client.model.PutStreamRequest;
import org.openapitools.client.model.PutStreamResponse;
import org.openapitools.client.model.SensorInstance;
import org.openapitools.client.model.Version;

import com.google.gson.reflect.TypeToken;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private long reauthTime; // TODO make unsigned long

    public DefaultApi() throws Exception {
    	this(null, null, false, 300000);
//        this(Configuration.getDefaultApiClient());
    }
    
    public DefaultApi(String license_id, String license_file) throws Exception {
    	this(license_id, license_file, false, 300000);
//        this(Configuration.getDefaultApiClient());
    }

//    public DefaultApi(ApiClient apiClient) {
//        this.localVarApiClient = apiClient;
//    }
    
    public DefaultApi(String license_id, String license_file, Boolean verify, int timeout) throws Exception {
    	this.reauthTime = 0;

    	localVarApiClient = new ApiClient();
    	
    	localVarApiClient.setVerifyingSsl(verify);
    	localVarApiClient.setConnectTimeout(timeout);
    	localVarApiClient.setUserAgent("BoonLogic/amber-java-sdk/requests");
    	

    	String license_identifier = System.getenv("AMBER_LICENSE_ID");
    	license_id = (license_identifier == null) ? license_id : license_identifier;
    	
    	String license_path = System.getenv("AMBER_LICENSE_FILE");
    	license_file = (license_path == null) ? license_file : license_path;
    	
    	String username = "";
    	String password = "";
    	String server = "";
    	String oauthServer = "";
    	try {
    		if (license_file != null) {
    			File f = new File(license_file);
    			if (f.exists()) {
    				JSONParser parser = new JSONParser();
    			      try {
    			         Object obj = parser.parse(new FileReader(license_file));
    			         JSONObject jsonObject = (JSONObject)obj;
    			         JSONObject profile = (JSONObject) jsonObject.get(license_id);
    			         username = (String) profile.get("username");
    			         localVarApiClient.setUsername(username);
    			     	 localVarApiClient.setPassword(password);
    			     	 server = (String) profile.get("server");
    			     	 localVarApiClient.setBasePath(server);
    			     	 oauthServer = (String) profile.get("oauth-server");
    			     	 if (oauthServer == null) {
    			     		localVarApiClient.setOauthPath(server);
    			     	 } else {
    			     		localVarApiClient.setOauthPath(oauthServer);
    			     	 }
    			      } finally {
    			    	  // something went wrong but continue
    			      }
    			} else {
    				throw new Exception("Amber license file not found");
    			}
    		}
    	} finally {
    		
    	}
    	
    	// override env variables
    	String envUsername = System.getenv("AMBER_USERNAME");
    	username = (envUsername != null) ? envUsername : username;
    	localVarApiClient.setUsername(username);
    	
    	String envUPassword = System.getenv("AMBER_PASSWORD");
    	password = (envUPassword != null) ? envUPassword : password;
    	localVarApiClient.setPassword(password);
    	
    	String envServer = System.getenv("AMBER_SERVER");
    	server = (envServer != null) ? envServer : server;
    	localVarApiClient.setBasePath(server);
    	
    	String envOauth = System.getenv("AMBER_OAUTH_SERVER");
    	oauthServer = (envOauth != null) ? envOauth : oauthServer;
    	localVarApiClient.setOauthPath(oauthServer);
    	
    	// check verify env TODO
//    	String envVerify = System.getenv("AMBER_SSL_VERIFY");
//    	String tmp_verify = (envVerify != null) ? envVerify : verify;
//    	localVarApiClient.setVerifyingSsl(verify);
    	
    	if (username == "") {
    		throw new Exception("username not specified");
    	}
    	if (password == "") {
    		throw new Exception("password not specified");
    	}
    	if (server == "") {
    		throw new Exception("server not specified");
    	}
    	
    	localVarApiClient.addDefaultHeader("Content-Type", "application/json");

    }

    private long timeNow() {
    	long unixTimestamp = Instant.now().getEpochSecond();
    	return unixTimestamp;
    }
    
    private void authenticate() {
    	this.authenticate(false);
    }
   
    private void authenticate(Boolean force) {
    	if (!force && this.timeNow() <= this.reauthTime) {
    		return; //not yet
    	}
    	
    	
    }

    /**
     * Build call for deleteSensor
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSensorCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSensorValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling deleteSensor(Async)");
        }

        return deleteSensorCall(sensorId, _callback);

    }

    /**
     * Delete a sensor instance
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Error deleteSensor(String sensorId) throws ApiException {
        ApiResponse<Error> localVarResp = deleteSensorWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Delete a sensor instance
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Error> deleteSensorWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = deleteSensorValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a sensor instance (asynchronously)
     * Deletes the sensor instance with the specified sensorId.
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSensorAsync(String sensorId, final ApiCallback<Error> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSensorValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAmberSummary
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmberSummaryCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmberSummaryValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getAmberSummary(Async)");
        }

        return getAmberSummaryCall(sensorId, _callback);

    }

    /**
     * Get the JSON block of the amber image
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @return GetSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryResponse getAmberSummary(String sensorId) throws ApiException {
        ApiResponse<GetSummaryResponse> localVarResp = getAmberSummaryWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Get the JSON block of the amber image
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSummaryResponse> getAmberSummaryWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = getAmberSummaryValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<GetSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the JSON block of the amber image (asynchronously)
     * Returns the json block of the amber sensor
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmberSummaryAsync(String sensorId, final ApiCallback<GetSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmberSummaryValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<GetSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfig
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getConfig(Async)");
        }

        return getConfigCall(sensorId, _callback);

    }

    /**
     * Get the current configuration of a sensor instance
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigResponse getConfig(String sensorId) throws ApiException {
        ApiResponse<GetConfigResponse> localVarResp = getConfigWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Get the current configuration of a sensor instance
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfigResponse> getConfigWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<GetConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current configuration of a sensor instance (asynchronously)
     * Returns the current configuration of the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigAsync(String sensorId, final ApiCallback<GetConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<GetConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPretrain
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sensor is not pretraining </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Sensor is currently pretraining </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPretrainCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pretrain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPretrainValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getPretrain(Async)");
        }

        return getPretrainCall(sensorId, _callback);

    }

    /**
     * Get status of pretrain operation
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetPretrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sensor is not pretraining </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Sensor is currently pretraining </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public GetPretrainResponse getPretrain(String sensorId) throws ApiException {
        ApiResponse<GetPretrainResponse> localVarResp = getPretrainWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Get status of pretrain operation
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetPretrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sensor is not pretraining </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Sensor is currently pretraining </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPretrainResponse> getPretrainWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = getPretrainValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<GetPretrainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of pretrain operation (asynchronously)
     * Get status of a sensor which is currently pretraining.
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sensor is not pretraining </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Sensor is currently pretraining </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPretrainAsync(String sensorId, final ApiCallback<GetPretrainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPretrainValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<GetPretrainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRootCause
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRootCauseCall(String sensorId, String clusterID, String pattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rootCause";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clusterID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clusterID", clusterID));
        }

        if (pattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pattern", pattern));
        }

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRootCauseValidateBeforeCall(String sensorId, String clusterID, String pattern, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getRootCause(Async)");
        }

        return getRootCauseCall(sensorId, clusterID, pattern, _callback);

    }

    /**
     * Get root cause analysis information from a sensor
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @return List&lt;List&lt;Float&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Float>> getRootCause(String sensorId, String clusterID, String pattern) throws ApiException {
        ApiResponse<List<List<Float>>> localVarResp = getRootCauseWithHttpInfo(sensorId, clusterID, pattern);
        return localVarResp.getData();
    }

    /**
     * Get root cause analysis information from a sensor
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Float&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Float>>> getRootCauseWithHttpInfo(String sensorId, String clusterID, String pattern) throws ApiException {
        okhttp3.Call localVarCall = getRootCauseValidateBeforeCall(sensorId, clusterID, pattern, null);
        Type localVarReturnType = new TypeToken<List<List<Float>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get root cause analysis information from a sensor (asynchronously)
     * Returns analytic information on the root cause for the clusters provided.
     * @param sensorId Unique identifier for sensor (required)
     * @param clusterID An array of cluster IDs (optional)
     * @param pattern Patterns to compare to the nano model for the root cause analysis (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRootCauseAsync(String sensorId, String clusterID, String pattern, final ApiCallback<List<List<Float>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRootCauseValidateBeforeCall(sensorId, clusterID, pattern, _callback);
        Type localVarReturnType = new TypeToken<List<List<Float>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSensor
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSensorCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSensorValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getSensor(Async)");
        }

        return getSensorCall(sensorId, _callback);

    }

    /**
     * Get basic information about a sensor instance
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetSensorResponse getSensor(String sensorId) throws ApiException {
        ApiResponse<GetSensorResponse> localVarResp = getSensorWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Get basic information about a sensor instance
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSensorResponse> getSensorWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = getSensorValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<GetSensorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basic information about a sensor instance (asynchronously)
     * Returns basic information about an existing sensor instance.
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSensorAsync(String sensorId, final ApiCallback<GetSensorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSensorValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<GetSensorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSensors
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSensorsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSensorsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSensorsCall(_callback);

    }

    /**
     * List all sensors for this user
     * Returns a list of all current sensor instances for this user.
     * @return List&lt;SensorInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<SensorInstance> getSensors() throws ApiException {
        ApiResponse<List<SensorInstance>> localVarResp = getSensorsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all sensors for this user
     * Returns a list of all current sensor instances for this user.
     * @return ApiResponse&lt;List&lt;SensorInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensorInstance>> getSensorsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSensorsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SensorInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all sensors for this user (asynchronously)
     * Returns a list of all current sensor instances for this user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSensorsAsync(final ApiCallback<List<SensorInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSensorsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SensorInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatus
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling getStatus(Async)");
        }

        return getStatusCall(sensorId, _callback);

    }

    /**
     * Get analytic information from a sensor
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @return GetStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusResponse getStatus(String sensorId) throws ApiException {
        ApiResponse<GetStatusResponse> localVarResp = getStatusWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Get analytic information from a sensor
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;GetStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatusResponse> getStatusWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<GetStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get analytic information from a sensor (asynchronously)
     * Returns analytic information derived from data processed by a sensor thus far.
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusAsync(String sensorId, final ApiCallback<GetStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<GetStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersion
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, version information returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getVersionCall(_callback);

    }

    /**
     * Retrieves API version information
     * 
     * @return Version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, version information returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Version getVersion() throws ApiException {
        ApiResponse<Version> localVarResp = getVersionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves API version information
     * 
     * @return ApiResponse&lt;Version&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, version information returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Version> getVersionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVersionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves API version information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, version information returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionAsync(final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfig
     * @param sensorId Unique identifier for sensor (required)
     * @param postConfigRequest Sensor configuration to be applied (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigCall(String sensorId, PostConfigRequest postConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postConfigRequest;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigValidateBeforeCall(String sensorId, PostConfigRequest postConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postConfig(Async)");
        }

        // verify the required parameter 'postConfigRequest' is set
        if (postConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'postConfigRequest' when calling postConfig(Async)");
        }

        return postConfigCall(sensorId, postConfigRequest, _callback);

    }

    /**
     * Apply configuration to a sensor instance
     * Applies the provided configuration to the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param postConfigRequest Sensor configuration to be applied (required)
     * @return PostConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public PostConfigResponse postConfig(String sensorId, PostConfigRequest postConfigRequest) throws ApiException {
        ApiResponse<PostConfigResponse> localVarResp = postConfigWithHttpInfo(sensorId, postConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Apply configuration to a sensor instance
     * Applies the provided configuration to the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param postConfigRequest Sensor configuration to be applied (required)
     * @return ApiResponse&lt;PostConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostConfigResponse> postConfigWithHttpInfo(String sensorId, PostConfigRequest postConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = postConfigValidateBeforeCall(sensorId, postConfigRequest, null);
        Type localVarReturnType = new TypeToken<PostConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply configuration to a sensor instance (asynchronously)
     * Applies the provided configuration to the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param postConfigRequest Sensor configuration to be applied (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigAsync(String sensorId, PostConfigRequest postConfigRequest, final ApiCallback<PostConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigValidateBeforeCall(sensorId, postConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<PostConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauth2
     * @param postAuth2Request Account credentials to be used for authentication (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauth2Call(PostAuth2Request postAuth2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAuth2Request;

        // create path and map variables
        String localVarPath = "/oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauth2ValidateBeforeCall(PostAuth2Request postAuth2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postAuth2Request' is set
        if (postAuth2Request == null) {
            throw new ApiException("Missing the required parameter 'postAuth2Request' when calling postOauth2(Async)");
        }

        return postOauth2Call(postAuth2Request, _callback);

    }

    /**
     * Request a bearer token using Amber account credentials
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param postAuth2Request Account credentials to be used for authentication (required)
     * @return PostAuth2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PostAuth2Response postOauth2(PostAuth2Request postAuth2Request) throws ApiException {
        ApiResponse<PostAuth2Response> localVarResp = postOauth2WithHttpInfo(postAuth2Request);
        return localVarResp.getData();
    }

    /**
     * Request a bearer token using Amber account credentials
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param postAuth2Request Account credentials to be used for authentication (required)
     * @return ApiResponse&lt;PostAuth2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostAuth2Response> postOauth2WithHttpInfo(PostAuth2Request postAuth2Request) throws ApiException {
        okhttp3.Call localVarCall = postOauth2ValidateBeforeCall(postAuth2Request, null);
        Type localVarReturnType = new TypeToken<PostAuth2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a bearer token using Amber account credentials (asynchronously)
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     * @param postAuth2Request Account credentials to be used for authentication (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauth2Async(PostAuth2Request postAuth2Request, final ApiCallback<PostAuth2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauth2ValidateBeforeCall(postAuth2Request, _callback);
        Type localVarReturnType = new TypeToken<PostAuth2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOutage
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOutageCall(String sensorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/outage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOutageValidateBeforeCall(String sensorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postOutage(Async)");
        }

        return postOutageCall(sensorId, _callback);

    }

    /**
     * Informs the server of an outage
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @return PostOutageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PostOutageResponse postOutage(String sensorId) throws ApiException {
        ApiResponse<PostOutageResponse> localVarResp = postOutageWithHttpInfo(sensorId);
        return localVarResp.getData();
    }

    /**
     * Informs the server of an outage
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @return ApiResponse&lt;PostOutageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostOutageResponse> postOutageWithHttpInfo(String sensorId) throws ApiException {
        okhttp3.Call localVarCall = postOutageValidateBeforeCall(sensorId, null);
        Type localVarReturnType = new TypeToken<PostOutageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Informs the server of an outage (asynchronously)
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     * @param sensorId Unique identifier for sensor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOutageAsync(String sensorId, final ApiCallback<PostOutageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOutageValidateBeforeCall(sensorId, _callback);
        Type localVarReturnType = new TypeToken<PostOutageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPretrain
     * @param sensorId Unique identifier for sensor (required)
     * @param postPretrainRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param pretrainAsync Internal header for async lambda processing (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation was accepted </td><td>  * amberTransaction -  <br>  * pretrain-async -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server is busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPretrainCall(String sensorId, PostPretrainRequest postPretrainRequest, String amberChunk, String amberTransaction, String pretrainAsync, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postPretrainRequest;

        // create path and map variables
        String localVarPath = "/pretrain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        if (amberChunk != null) {
            localVarHeaderParams.put("amberChunk", localVarApiClient.parameterToString(amberChunk));
        }

        if (amberTransaction != null) {
            localVarHeaderParams.put("amberTransaction", localVarApiClient.parameterToString(amberTransaction));
        }

        if (pretrainAsync != null) {
            localVarHeaderParams.put("pretrain-async", localVarApiClient.parameterToString(pretrainAsync));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPretrainValidateBeforeCall(String sensorId, PostPretrainRequest postPretrainRequest, String amberChunk, String amberTransaction, String pretrainAsync, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postPretrain(Async)");
        }

        // verify the required parameter 'postPretrainRequest' is set
        if (postPretrainRequest == null) {
            throw new ApiException("Missing the required parameter 'postPretrainRequest' when calling postPretrain(Async)");
        }

        return postPretrainCall(sensorId, postPretrainRequest, amberChunk, amberTransaction, pretrainAsync, _callback);

    }

    /**
     * Pretrain a sensor using historical data
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param sensorId Unique identifier for sensor (required)
     * @param postPretrainRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param pretrainAsync Internal header for async lambda processing (optional)
     * @return PostPretrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation was accepted </td><td>  * amberTransaction -  <br>  * pretrain-async -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server is busy </td><td>  -  </td></tr>
     </table>
     */
    public PostPretrainResponse postPretrain(String sensorId, PostPretrainRequest postPretrainRequest, String amberChunk, String amberTransaction, String pretrainAsync) throws ApiException {
        ApiResponse<PostPretrainResponse> localVarResp = postPretrainWithHttpInfo(sensorId, postPretrainRequest, amberChunk, amberTransaction, pretrainAsync);
        return localVarResp.getData();
    }

    /**
     * Pretrain a sensor using historical data
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param sensorId Unique identifier for sensor (required)
     * @param postPretrainRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param pretrainAsync Internal header for async lambda processing (optional)
     * @return ApiResponse&lt;PostPretrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation was accepted </td><td>  * amberTransaction -  <br>  * pretrain-async -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server is busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostPretrainResponse> postPretrainWithHttpInfo(String sensorId, PostPretrainRequest postPretrainRequest, String amberChunk, String amberTransaction, String pretrainAsync) throws ApiException {
        okhttp3.Call localVarCall = postPretrainValidateBeforeCall(sensorId, postPretrainRequest, amberChunk, amberTransaction, pretrainAsync, null);
        Type localVarReturnType = new TypeToken<PostPretrainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pretrain a sensor using historical data (asynchronously)
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     * @param sensorId Unique identifier for sensor (required)
     * @param postPretrainRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param amberChunk Specification of chunk, 1:3 2:3 3:3 for example (optional)
     * @param amberTransaction Unique identifier for chunk transactions (optional)
     * @param pretrainAsync Internal header for async lambda processing (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation was accepted </td><td>  * amberTransaction -  <br>  * pretrain-async -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server is busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPretrainAsync(String sensorId, PostPretrainRequest postPretrainRequest, String amberChunk, String amberTransaction, String pretrainAsync, final ApiCallback<PostPretrainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPretrainValidateBeforeCall(sensorId, postPretrainRequest, amberChunk, amberTransaction, pretrainAsync, _callback);
        Type localVarReturnType = new TypeToken<PostPretrainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSensor
     * @param postSensorRequest Label for new sensor instance to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSensorCall(PostSensorRequest postSensorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postSensorRequest;

        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSensorValidateBeforeCall(PostSensorRequest postSensorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postSensorRequest' is set
        if (postSensorRequest == null) {
            throw new ApiException("Missing the required parameter 'postSensorRequest' when calling postSensor(Async)");
        }

        return postSensorCall(postSensorRequest, _callback);

    }

    /**
     * Create a new a sensor instance
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param postSensorRequest Label for new sensor instance to be created (required)
     * @return PostSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PostSensorResponse postSensor(PostSensorRequest postSensorRequest) throws ApiException {
        ApiResponse<PostSensorResponse> localVarResp = postSensorWithHttpInfo(postSensorRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new a sensor instance
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param postSensorRequest Label for new sensor instance to be created (required)
     * @return ApiResponse&lt;PostSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostSensorResponse> postSensorWithHttpInfo(PostSensorRequest postSensorRequest) throws ApiException {
        okhttp3.Call localVarCall = postSensorValidateBeforeCall(postSensorRequest, null);
        Type localVarReturnType = new TypeToken<PostSensorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new a sensor instance (asynchronously)
     * Spawns a new sensor instance, returning its unique sensorId.
     * @param postSensorRequest Label for new sensor instance to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSensorAsync(PostSensorRequest postSensorRequest, final ApiCallback<PostSensorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSensorValidateBeforeCall(postSensorRequest, _callback);
        Type localVarReturnType = new TypeToken<PostSensorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStream
     * @param sensorId Unique identifier for sensor (required)
     * @param postStreamRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStreamCall(String sensorId, PostStreamRequest postStreamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postStreamRequest;

        // create path and map variables
        String localVarPath = "/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStreamValidateBeforeCall(String sensorId, PostStreamRequest postStreamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling postStream(Async)");
        }

        // verify the required parameter 'postStreamRequest' is set
        if (postStreamRequest == null) {
            throw new ApiException("Missing the required parameter 'postStreamRequest' when calling postStream(Async)");
        }

        return postStreamCall(sensorId, postStreamRequest, _callback);

    }

    /**
     * Stream data to a sensor
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - RI : array of values ranging from 0 to 1000 that give a gauge as to how uncommon the sample&#39;s cluster is. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical). - NI : array of values ranging from 0 to 1000 to give a rating for unseen clusters on how new the data points are compared the the rest of the model&#39;s clusters. - NS : array of values ranging from 0 to 1000 that is a weighted average of the time series of NI. - NW : an array of NS values that are normalized to range from 0 to 2. - OM : an array of floats signifying roughly the operational mode that the state is in based on a sliding window average cluster ID.
     * @param sensorId Unique identifier for sensor (required)
     * @param postStreamRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @return PostStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public PostStreamResponse postStream(String sensorId, PostStreamRequest postStreamRequest) throws ApiException {
        ApiResponse<PostStreamResponse> localVarResp = postStreamWithHttpInfo(sensorId, postStreamRequest);
        return localVarResp.getData();
    }

    /**
     * Stream data to a sensor
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - RI : array of values ranging from 0 to 1000 that give a gauge as to how uncommon the sample&#39;s cluster is. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical). - NI : array of values ranging from 0 to 1000 to give a rating for unseen clusters on how new the data points are compared the the rest of the model&#39;s clusters. - NS : array of values ranging from 0 to 1000 that is a weighted average of the time series of NI. - NW : an array of NS values that are normalized to range from 0 to 2. - OM : an array of floats signifying roughly the operational mode that the state is in based on a sliding window average cluster ID.
     * @param sensorId Unique identifier for sensor (required)
     * @param postStreamRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @return ApiResponse&lt;PostStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostStreamResponse> postStreamWithHttpInfo(String sensorId, PostStreamRequest postStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = postStreamValidateBeforeCall(sensorId, postStreamRequest, null);
        Type localVarReturnType = new TypeToken<PostStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream data to a sensor (asynchronously)
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - RI : array of values ranging from 0 to 1000 that give a gauge as to how uncommon the sample&#39;s cluster is. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical). - NI : array of values ranging from 0 to 1000 to give a rating for unseen clusters on how new the data points are compared the the rest of the model&#39;s clusters. - NS : array of values ranging from 0 to 1000 that is a weighted average of the time series of NI. - NW : an array of NS values that are normalized to range from 0 to 2. - OM : an array of floats signifying roughly the operational mode that the state is in based on a sliding window average cluster ID.
     * @param sensorId Unique identifier for sensor (required)
     * @param postStreamRequest Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStreamAsync(String sensorId, PostStreamRequest postStreamRequest, final ApiCallback<PostStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStreamValidateBeforeCall(sensorId, postStreamRequest, _callback);
        Type localVarReturnType = new TypeToken<PostStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putConfig
     * @param sensorId Unique identifier for sensor (required)
     * @param putConfigRequest Updates to sensor configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putConfigCall(String sensorId, PutConfigRequest putConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putConfigRequest;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putConfigValidateBeforeCall(String sensorId, PutConfigRequest putConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putConfig(Async)");
        }

        // verify the required parameter 'putConfigRequest' is set
        if (putConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'putConfigRequest' when calling putConfig(Async)");
        }

        return putConfigCall(sensorId, putConfigRequest, _callback);

    }

    /**
     * Update configuration for a sensor instance
     * Updates the configuration for the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putConfigRequest Updates to sensor configuration (required)
     * @return PutConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public PutConfigResponse putConfig(String sensorId, PutConfigRequest putConfigRequest) throws ApiException {
        ApiResponse<PutConfigResponse> localVarResp = putConfigWithHttpInfo(sensorId, putConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Update configuration for a sensor instance
     * Updates the configuration for the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putConfigRequest Updates to sensor configuration (required)
     * @return ApiResponse&lt;PutConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutConfigResponse> putConfigWithHttpInfo(String sensorId, PutConfigRequest putConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = putConfigValidateBeforeCall(sensorId, putConfigRequest, null);
        Type localVarReturnType = new TypeToken<PutConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update configuration for a sensor instance (asynchronously)
     * Updates the configuration for the sensor instance specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putConfigRequest Updates to sensor configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putConfigAsync(String sensorId, PutConfigRequest putConfigRequest, final ApiCallback<PutConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putConfigValidateBeforeCall(sensorId, putConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<PutConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSensor
     * @param sensorId Unique identifier for sensor (required)
     * @param putSensorRequest New label to apply to sensor instance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSensorCall(String sensorId, PutSensorRequest putSensorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSensorRequest;

        // create path and map variables
        String localVarPath = "/sensor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSensorValidateBeforeCall(String sensorId, PutSensorRequest putSensorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putSensor(Async)");
        }

        // verify the required parameter 'putSensorRequest' is set
        if (putSensorRequest == null) {
            throw new ApiException("Missing the required parameter 'putSensorRequest' when calling putSensor(Async)");
        }

        return putSensorCall(sensorId, putSensorRequest, _callback);

    }

    /**
     * Update label for a sensor instance
     * Changes the label of an existing sensor instance to the new label specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putSensorRequest New label to apply to sensor instance (required)
     * @return PutSensorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PutSensorResponse putSensor(String sensorId, PutSensorRequest putSensorRequest) throws ApiException {
        ApiResponse<PutSensorResponse> localVarResp = putSensorWithHttpInfo(sensorId, putSensorRequest);
        return localVarResp.getData();
    }

    /**
     * Update label for a sensor instance
     * Changes the label of an existing sensor instance to the new label specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putSensorRequest New label to apply to sensor instance (required)
     * @return ApiResponse&lt;PutSensorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutSensorResponse> putSensorWithHttpInfo(String sensorId, PutSensorRequest putSensorRequest) throws ApiException {
        okhttp3.Call localVarCall = putSensorValidateBeforeCall(sensorId, putSensorRequest, null);
        Type localVarReturnType = new TypeToken<PutSensorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update label for a sensor instance (asynchronously)
     * Changes the label of an existing sensor instance to the new label specified.
     * @param sensorId Unique identifier for sensor (required)
     * @param putSensorRequest New label to apply to sensor instance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSensorAsync(String sensorId, PutSensorRequest putSensorRequest, final ApiCallback<PutSensorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSensorValidateBeforeCall(sensorId, putSensorRequest, _callback);
        Type localVarReturnType = new TypeToken<PutSensorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putStream
     * @param sensorId Unique identifier for sensor (required)
     * @param putStreamRequest New values for sensor fusion vector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vector has been updated and analytics were run. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vector has been updated but no analytics were run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStreamCall(String sensorId, PutStreamRequest putStreamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putStreamRequest;

        // create path and map variables
        String localVarPath = "/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensorId != null) {
            localVarHeaderParams.put("sensorId", localVarApiClient.parameterToString(sensorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorize-amber-pool" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putStreamValidateBeforeCall(String sensorId, PutStreamRequest putStreamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensorId' is set
        if (sensorId == null) {
            throw new ApiException("Missing the required parameter 'sensorId' when calling putStream(Async)");
        }

        // verify the required parameter 'putStreamRequest' is set
        if (putStreamRequest == null) {
            throw new ApiException("Missing the required parameter 'putStreamRequest' when calling putStream(Async)");
        }

        return putStreamCall(sensorId, putStreamRequest, _callback);

    }

    /**
     * Stream data to a sensor fusion vector
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param sensorId Unique identifier for sensor (required)
     * @param putStreamRequest New values for sensor fusion vector. (required)
     * @return PutStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vector has been updated and analytics were run. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vector has been updated but no analytics were run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public PutStreamResponse putStream(String sensorId, PutStreamRequest putStreamRequest) throws ApiException {
        ApiResponse<PutStreamResponse> localVarResp = putStreamWithHttpInfo(sensorId, putStreamRequest);
        return localVarResp.getData();
    }

    /**
     * Stream data to a sensor fusion vector
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param sensorId Unique identifier for sensor (required)
     * @param putStreamRequest New values for sensor fusion vector. (required)
     * @return ApiResponse&lt;PutStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vector has been updated and analytics were run. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vector has been updated but no analytics were run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutStreamResponse> putStreamWithHttpInfo(String sensorId, PutStreamRequest putStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = putStreamValidateBeforeCall(sensorId, putStreamRequest, null);
        Type localVarReturnType = new TypeToken<PutStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream data to a sensor fusion vector (asynchronously)
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     * @param sensorId Unique identifier for sensor (required)
     * @param putStreamRequest New values for sensor fusion vector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vector has been updated and analytics were run. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vector has been updated but no analytics were run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStreamAsync(String sensorId, PutStreamRequest putStreamRequest, final ApiCallback<PutStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putStreamValidateBeforeCall(sensorId, putStreamRequest, _callback);
        Type localVarReturnType = new TypeToken<PutStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
