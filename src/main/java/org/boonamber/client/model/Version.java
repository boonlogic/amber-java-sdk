/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.boonamber.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.boonamber.client.JSON;

/**
 * Version
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Version {
  public static final String SERIALIZED_NAME_API_VERSION = "api-version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_SWAGGER_UI = "swagger-ui";
  @SerializedName(SERIALIZED_NAME_SWAGGER_UI)
  private String swaggerUi;

  public static final String SERIALIZED_NAME_BUILDER = "builder";
  @SerializedName(SERIALIZED_NAME_BUILDER)
  private String builder;

  public static final String SERIALIZED_NAME_EXPERT_API = "expert-api";
  @SerializedName(SERIALIZED_NAME_EXPERT_API)
  private String expertApi;

  public static final String SERIALIZED_NAME_EXPERT_COMMON = "expert-common";
  @SerializedName(SERIALIZED_NAME_EXPERT_COMMON)
  private String expertCommon;

  public static final String SERIALIZED_NAME_NANO_SECURE = "nano-secure";
  @SerializedName(SERIALIZED_NAME_NANO_SECURE)
  private String nanoSecure;

  public static final String SERIALIZED_NAME_AMBER_STORE = "amber-store";
  @SerializedName(SERIALIZED_NAME_AMBER_STORE)
  private String amberStore;

  public static final String SERIALIZED_NAME_MONGOLIA = "mongolia";
  @SerializedName(SERIALIZED_NAME_MONGOLIA)
  private String mongolia;

  public Version() {
  }

  public Version apiVersion(String apiVersion) {
    
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * API version.
   * @return apiVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "API version.")

  public String getApiVersion() {
    return apiVersion;
  }


  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public Version release(String release) {
    
    this.release = release;
    return this;
  }

   /**
   * Software release of server.
   * @return release
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Software release of server.")

  public String getRelease() {
    return release;
  }


  public void setRelease(String release) {
    this.release = release;
  }


  public Version swaggerUi(String swaggerUi) {
    
    this.swaggerUi = swaggerUi;
    return this;
  }

   /**
   * SHA-1 of Swagger UI.
   * @return swaggerUi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of Swagger UI.")

  public String getSwaggerUi() {
    return swaggerUi;
  }


  public void setSwaggerUi(String swaggerUi) {
    this.swaggerUi = swaggerUi;
  }


  public Version builder(String builder) {
    
    this.builder = builder;
    return this;
  }

   /**
   * SHA-1 of &#x60;builder&#x60;.
   * @return builder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `builder`.")

  public String getBuilder() {
    return builder;
  }


  public void setBuilder(String builder) {
    this.builder = builder;
  }


  public Version expertApi(String expertApi) {
    
    this.expertApi = expertApi;
    return this;
  }

   /**
   * SHA-1 of &#x60;expert-api&#x60;.
   * @return expertApi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `expert-api`.")

  public String getExpertApi() {
    return expertApi;
  }


  public void setExpertApi(String expertApi) {
    this.expertApi = expertApi;
  }


  public Version expertCommon(String expertCommon) {
    
    this.expertCommon = expertCommon;
    return this;
  }

   /**
   * SHA-1 of &#x60;expert-common&#x60;.
   * @return expertCommon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `expert-common`.")

  public String getExpertCommon() {
    return expertCommon;
  }


  public void setExpertCommon(String expertCommon) {
    this.expertCommon = expertCommon;
  }


  public Version nanoSecure(String nanoSecure) {
    
    this.nanoSecure = nanoSecure;
    return this;
  }

   /**
   * SHA-1 of &#x60;nano-secure&#x60;.
   * @return nanoSecure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `nano-secure`.")

  public String getNanoSecure() {
    return nanoSecure;
  }


  public void setNanoSecure(String nanoSecure) {
    this.nanoSecure = nanoSecure;
  }


  public Version amberStore(String amberStore) {
    
    this.amberStore = amberStore;
    return this;
  }

   /**
   * SHA-1 of &#x60;amber-store&#x60;.
   * @return amberStore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `amber-store`.")

  public String getAmberStore() {
    return amberStore;
  }


  public void setAmberStore(String amberStore) {
    this.amberStore = amberStore;
  }


  public Version mongolia(String mongolia) {
    
    this.mongolia = mongolia;
    return this;
  }

   /**
   * SHA-1 of &#x60;mongolia&#x60;.
   * @return mongolia
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SHA-1 of `mongolia`.")

  public String getMongolia() {
    return mongolia;
  }


  public void setMongolia(String mongolia) {
    this.mongolia = mongolia;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.apiVersion, version.apiVersion) &&
        Objects.equals(this.release, version.release) &&
        Objects.equals(this.swaggerUi, version.swaggerUi) &&
        Objects.equals(this.builder, version.builder) &&
        Objects.equals(this.expertApi, version.expertApi) &&
        Objects.equals(this.expertCommon, version.expertCommon) &&
        Objects.equals(this.nanoSecure, version.nanoSecure) &&
        Objects.equals(this.amberStore, version.amberStore) &&
        Objects.equals(this.mongolia, version.mongolia);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, release, swaggerUi, builder, expertApi, expertCommon, nanoSecure, amberStore, mongolia);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    swaggerUi: ").append(toIndentedString(swaggerUi)).append("\n");
    sb.append("    builder: ").append(toIndentedString(builder)).append("\n");
    sb.append("    expertApi: ").append(toIndentedString(expertApi)).append("\n");
    sb.append("    expertCommon: ").append(toIndentedString(expertCommon)).append("\n");
    sb.append("    nanoSecure: ").append(toIndentedString(nanoSecure)).append("\n");
    sb.append("    amberStore: ").append(toIndentedString(amberStore)).append("\n");
    sb.append("    mongolia: ").append(toIndentedString(mongolia)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-version");
    openapiFields.add("release");
    openapiFields.add("swagger-ui");
    openapiFields.add("builder");
    openapiFields.add("expert-api");
    openapiFields.add("expert-common");
    openapiFields.add("nano-secure");
    openapiFields.add("amber-store");
    openapiFields.add("mongolia");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Version
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Version.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Version is not found in the empty JSON string", Version.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Version.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Version` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("api-version") != null && !jsonObj.get("api-version").isJsonNull()) && !jsonObj.get("api-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-version").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("swagger-ui") != null && !jsonObj.get("swagger-ui").isJsonNull()) && !jsonObj.get("swagger-ui").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swagger-ui` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swagger-ui").toString()));
      }
      if ((jsonObj.get("builder") != null && !jsonObj.get("builder").isJsonNull()) && !jsonObj.get("builder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `builder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("builder").toString()));
      }
      if ((jsonObj.get("expert-api") != null && !jsonObj.get("expert-api").isJsonNull()) && !jsonObj.get("expert-api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expert-api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expert-api").toString()));
      }
      if ((jsonObj.get("expert-common") != null && !jsonObj.get("expert-common").isJsonNull()) && !jsonObj.get("expert-common").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expert-common` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expert-common").toString()));
      }
      if ((jsonObj.get("nano-secure") != null && !jsonObj.get("nano-secure").isJsonNull()) && !jsonObj.get("nano-secure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nano-secure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nano-secure").toString()));
      }
      if ((jsonObj.get("amber-store") != null && !jsonObj.get("amber-store").isJsonNull()) && !jsonObj.get("amber-store").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amber-store` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amber-store").toString()));
      }
      if ((jsonObj.get("mongolia") != null && !jsonObj.get("mongolia").isJsonNull()) && !jsonObj.get("mongolia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongolia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongolia").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Version.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Version' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Version> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Version.class));

       return (TypeAdapter<T>) new TypeAdapter<Version>() {
           @Override
           public void write(JsonWriter out, Version value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Version read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Version given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Version
  * @throws IOException if the JSON string is invalid with respect to Version
  */
  public static Version fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Version.class);
  }

 /**
  * Convert an instance of Version to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

