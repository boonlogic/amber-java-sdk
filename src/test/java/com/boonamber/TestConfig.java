/*
 * Amber API Server
 * Boon Logic Amber API server
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boonamber;

import com.boonamber.model.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

import java.util.ArrayList;
import java.util.List;

/**
 * API tests for DefaultApi
 */
public class TestConfig {

    private AmberV2Client api;
    
    private String label = "java:v2:tests";
    private String modelId = "";
    
    @BeforeEach
    void setUp() {
    	String lid = System.getenv("AMBER_TEST_LICENSE_ID");
    	String lf = System.getenv("AMBER_TEST_LICENSE_FILE");
    	try {
    		this.api = new AmberV2Client(lid, lf);
    	} catch(Exception e) {
    		Assertions.assertTrue(false, "amber client failed to initialize");
    	}
        PostModelRequest postModelRequest = new PostModelRequest();
        postModelRequest.setLabel(this.label);
        PostModelResponse response = null;
        try {
        	response = api.postModel(postModelRequest);
        } catch (ApiException e) {
        	Assertions.assertTrue(false);
        }
        Assertions.assertEquals(postModelRequest.getLabel(), this.label);
        this.modelId = response.getId();
    }
    
    @AfterEach
    void teardown() {
        try {
        	api.deleteModel(this.modelId);
        } catch (ApiException e) {
        	Assertions.assertTrue(false, "failed to delete model");
        }
    }
    
    /**
     * get model configuration
     *
     * Get the configuration of the specified model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigTest() throws ApiException {
    	// post config first
    	PostConfigRequest request = new PostConfigRequest();
        request.setStreamingWindow(25);
        List<FeatureConfig> features = new ArrayList<FeatureConfig>();
        FeatureConfig f = new FeatureConfig();
        f.setName("feature-0");
        features.add(f);
        request.setFeatures(features);
        PostConfigResponse response = api.postConfig(this.modelId, request);
        
        // test
        PostConfigResponse config = api.getConfig(this.modelId);
        Assertions.assertEquals(config.getPercentVariation(), response.getPercentVariation());

    }

    /**
     * configure a model
     *
     * Configure the specified model. Wipes all progress and puts the model in the &#x60;Buffering&#x60; state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postConfigTest() throws ApiException {
        PostConfigRequest request = new PostConfigRequest();
        request.setStreamingWindow(25);
        List<FeatureConfig> features = new ArrayList<FeatureConfig>();
        FeatureConfig f = new FeatureConfig();
        f.setName("feature-0");
        features.add(f);
        request.setFeatures(features);
        PostConfigResponse response = api.postConfig(this.modelId, request);
        
        Assertions.assertEquals(response.getPercentVariation(), (float)0.05);
        Assertions.assertEquals(response.getFeatures().size(), request.getFeatures().size());
    }
}
