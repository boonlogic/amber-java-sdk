/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.GetConfigResponse;
import io.swagger.client.model.GetPretrainResponse;
import io.swagger.client.model.GetRootCauseResponse;
import io.swagger.client.model.GetSensorResponse;
import io.swagger.client.model.GetSensorsResponse;
import io.swagger.client.model.GetStatusResponse;
import io.swagger.client.model.GetSummaryResponse;
import io.swagger.client.model.PostAuth2Request;
import io.swagger.client.model.PostAuth2Response;
import io.swagger.client.model.PostConfigRequest;
import io.swagger.client.model.PostConfigResponse;
import io.swagger.client.model.PostOutageResponse;
import io.swagger.client.model.PostPretrainRequest;
import io.swagger.client.model.PostPretrainResponse;
import io.swagger.client.model.PostSensorRequest;
import io.swagger.client.model.PostSensorResponse;
import io.swagger.client.model.PostStreamRequest;
import io.swagger.client.model.PostStreamResponse;
import io.swagger.client.model.PutConfigRequest;
import io.swagger.client.model.PutConfigResponse;
import io.swagger.client.model.PutSensorRequest;
import io.swagger.client.model.PutSensorResponse;
import io.swagger.client.model.PutStreamRequest;
import io.swagger.client.model.PutStreamResponse;
import io.swagger.client.model.Version;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Delete a sensor instance
     *
     * Deletes the sensor instance with the specified sensorId.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSensorTest() throws Exception {
        String sensorId = null;
        Error response = api.deleteSensor(sensorId);

        // TODO: test validations
    }
    /**
     * Get the JSON block of the amber image
     *
     * Returns the json block of the amber sensor
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAmberSummaryTest() throws Exception {
        String sensorId = null;
        GetSummaryResponse response = api.getAmberSummary(sensorId);

        // TODO: test validations
    }
    /**
     * Get the current configuration of a sensor instance
     *
     * Returns the current configuration of the sensor instance specified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConfigTest() throws Exception {
        String sensorId = null;
        GetConfigResponse response = api.getConfig(sensorId);

        // TODO: test validations
    }
    /**
     * Get status of pretrain operation
     *
     * Get status of a sensor which is currently pretraining.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPretrainTest() throws Exception {
        String sensorId = null;
        GetPretrainResponse response = api.getPretrain(sensorId);

        // TODO: test validations
    }
    /**
     * Get root cause analysis information from a sensor
     *
     * Returns analytic information on the root cause for the clusters provided.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRootCauseTest() throws Exception {
        String sensorId = null;
        String clusterID = null;
        String pattern = null;
        GetRootCauseResponse response = api.getRootCause(sensorId, clusterID, pattern);

        // TODO: test validations
    }
    /**
     * Get basic information about a sensor instance
     *
     * Returns basic information about an existing sensor instance.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSensorTest() throws Exception {
        String sensorId = null;
        GetSensorResponse response = api.getSensor(sensorId);

        // TODO: test validations
    }
    /**
     * List all sensors for this user
     *
     * Returns a list of all current sensor instances for this user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSensorsTest() throws Exception {
        GetSensorsResponse response = api.getSensors();

        // TODO: test validations
    }
    /**
     * Get analytic information from a sensor
     *
     * Returns analytic information derived from data processed by a sensor thus far.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStatusTest() throws Exception {
        String sensorId = null;
        GetStatusResponse response = api.getStatus(sensorId);

        // TODO: test validations
    }
    /**
     * Retrieves API version information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws Exception {
        Version response = api.getVersion();

        // TODO: test validations
    }
    /**
     * Apply configuration to a sensor instance
     *
     * Applies the provided configuration to the sensor instance specified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postConfigTest() throws Exception {
        PostConfigRequest body = null;
        String sensorId = null;
        PostConfigResponse response = api.postConfig(body, sensorId);

        // TODO: test validations
    }
    /**
     * Request a bearer token using Amber account credentials
     *
     * Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOauth2Test() throws Exception {
        PostAuth2Request body = null;
        PostAuth2Response response = api.postOauth2(body);

        // TODO: test validations
    }
    /**
     * Informs the server of an outage
     *
     * Clears the load buffer of streaming window and resets statistics. Returns stream status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOutageTest() throws Exception {
        String sensorId = null;
        PostOutageResponse response = api.postOutage(sensorId);

        // TODO: test validations
    }
    /**
     * Pretrain a sensor using historical data
     *
     * Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPretrainTest() throws Exception {
        PostPretrainRequest body = null;
        String sensorId = null;
        String amberChunk = null;
        String amberTransaction = null;
        PostPretrainResponse response = api.postPretrain(body, sensorId, amberChunk, amberTransaction);

        // TODO: test validations
    }
    /**
     * Create a new a sensor instance
     *
     * Spawns a new sensor instance, returning its unique sensorId.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postSensorTest() throws Exception {
        PostSensorRequest body = null;
        PostSensorResponse response = api.postSensor(body);

        // TODO: test validations
    }
    /**
     * Stream data to a sensor
     *
     * Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postStreamTest() throws Exception {
        PostStreamRequest body = null;
        String sensorId = null;
        PostStreamResponse response = api.postStream(body, sensorId);

        // TODO: test validations
    }
    /**
     * Update configuration for a sensor instance
     *
     * Updates the configuration for the sensor instance specified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putConfigTest() throws Exception {
        PutConfigRequest body = null;
        String sensorId = null;
        PutConfigResponse response = api.putConfig(body, sensorId);

        // TODO: test validations
    }
    /**
     * Update label for a sensor instance
     *
     * Changes the label of an existing sensor instance to the new label specified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putSensorTest() throws Exception {
        PutSensorRequest body = null;
        String sensorId = null;
        PutSensorResponse response = api.putSensor(body, sensorId);

        // TODO: test validations
    }
    /**
     * Stream data to a sensor fusion vector
     *
     * Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putStreamTest() throws Exception {
        PutStreamRequest body = null;
        String sensorId = null;
        PutStreamResponse response = api.putStream(body, sensorId);

        // TODO: test validations
    }
}
